"use strict";(self.webpackChunk_performant_software_storybook=self.webpackChunk_performant_software_storybook||[]).push([[7783],{"../../node_modules/@turf/turf/dist/es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{VWR:()=>es,bAF:()=>es_bboxPolygon,f3b:()=>buffer_dist_es,zLM:()=>es_feature});var es_earthRadius=6371008.8,factors={centimeters:100*es_earthRadius,centimetres:100*es_earthRadius,degrees:es_earthRadius/111325,feet:3.28084*es_earthRadius,inches:39.37*es_earthRadius,kilometers:es_earthRadius/1e3,kilometres:es_earthRadius/1e3,meters:es_earthRadius,metres:es_earthRadius,miles:es_earthRadius/1609.344,millimeters:1e3*es_earthRadius,millimetres:1e3*es_earthRadius,nauticalmiles:es_earthRadius/1852,radians:1,yards:1.0936*es_earthRadius};function es_feature(geom,properties,options){void 0===options&&(options={});var feat={type:"Feature"};return(0===options.id||options.id)&&(feat.id=options.id),options.bbox&&(feat.bbox=options.bbox),feat.properties=properties||{},feat.geometry=geom,feat}function es_point(coordinates,properties,options){if(void 0===options&&(options={}),!coordinates)throw new Error("coordinates is required");if(!Array.isArray(coordinates))throw new Error("coordinates must be an Array");if(coordinates.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!es_isNumber(coordinates[0])||!es_isNumber(coordinates[1]))throw new Error("coordinates must contain numbers");return es_feature({type:"Point",coordinates},properties,options)}function es_polygon(coordinates,properties,options){void 0===options&&(options={});for(var _i=0,coordinates_1=coordinates;_i<coordinates_1.length;_i++){var ring=coordinates_1[_i];if(ring.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var j=0;j<ring[ring.length-1].length;j++)if(ring[ring.length-1][j]!==ring[0][j])throw new Error("First and last Position are not equivalent.")}return es_feature({type:"Polygon",coordinates},properties,options)}function es_lineString(coordinates,properties,options){if(void 0===options&&(options={}),coordinates.length<2)throw new Error("coordinates must be an array of two or more positions");return es_feature({type:"LineString",coordinates},properties,options)}function es_featureCollection(features,options){void 0===options&&(options={});var fc={type:"FeatureCollection"};return options.id&&(fc.id=options.id),options.bbox&&(fc.bbox=options.bbox),fc.features=features,fc}function es_multiPoint(coordinates,properties,options){return void 0===options&&(options={}),es_feature({type:"MultiPoint",coordinates},properties,options)}function es_radiansToLength(radians,units){void 0===units&&(units="kilometers");var factor=factors[units];if(!factor)throw new Error(units+" units is invalid");return radians*factor}function es_lengthToRadians(distance,units){void 0===units&&(units="kilometers");var factor=factors[units];if(!factor)throw new Error(units+" units is invalid");return distance/factor}function es_isNumber(num){return!isNaN(num)&&null!==num&&!Array.isArray(num)}function es_coordEach(geojson,callback,excludeWrapCoord){if(null!==geojson)for(var j,k,l,geometry,stopG,coords,geometryMaybeCollection,isGeometryCollection,wrapShrink=0,coordIndex=0,type=geojson.type,isFeatureCollection="FeatureCollection"===type,isFeature="Feature"===type,stop=isFeatureCollection?geojson.features.length:1,featureIndex=0;featureIndex<stop;featureIndex++){stopG=(isGeometryCollection=!!(geometryMaybeCollection=isFeatureCollection?geojson.features[featureIndex].geometry:isFeature?geojson.geometry:geojson)&&"GeometryCollection"===geometryMaybeCollection.type)?geometryMaybeCollection.geometries.length:1;for(var geomIndex=0;geomIndex<stopG;geomIndex++){var multiFeatureIndex=0,geometryIndex=0;if(null!==(geometry=isGeometryCollection?geometryMaybeCollection.geometries[geomIndex]:geometryMaybeCollection)){coords=geometry.coordinates;var geomType=geometry.type;switch(wrapShrink=!excludeWrapCoord||"Polygon"!==geomType&&"MultiPolygon"!==geomType?0:1,geomType){case null:break;case"Point":if(!1===callback(coords,coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++,multiFeatureIndex++;break;case"LineString":case"MultiPoint":for(j=0;j<coords.length;j++){if(!1===callback(coords[j],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++,"MultiPoint"===geomType&&multiFeatureIndex++}"LineString"===geomType&&multiFeatureIndex++;break;case"Polygon":case"MultiLineString":for(j=0;j<coords.length;j++){for(k=0;k<coords[j].length-wrapShrink;k++){if(!1===callback(coords[j][k],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++}"MultiLineString"===geomType&&multiFeatureIndex++,"Polygon"===geomType&&geometryIndex++}"Polygon"===geomType&&multiFeatureIndex++;break;case"MultiPolygon":for(j=0;j<coords.length;j++){for(geometryIndex=0,k=0;k<coords[j].length;k++){for(l=0;l<coords[j][k].length-wrapShrink;l++){if(!1===callback(coords[j][k][l],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++}geometryIndex++}multiFeatureIndex++}break;case"GeometryCollection":for(j=0;j<geometry.geometries.length;j++)if(!1===es_coordEach(geometry.geometries[j],callback,excludeWrapCoord))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function es_featureEach(geojson,callback){if("Feature"===geojson.type)callback(geojson,0);else if("FeatureCollection"===geojson.type)for(var i=0;i<geojson.features.length&&!1!==callback(geojson.features[i],i);i++);}function es_geomEach(geojson,callback){var i,j,g,geometry,stopG,geometryMaybeCollection,isGeometryCollection,featureProperties,featureBBox,featureId,featureIndex=0,isFeatureCollection="FeatureCollection"===geojson.type,isFeature="Feature"===geojson.type,stop=isFeatureCollection?geojson.features.length:1;for(i=0;i<stop;i++){for(geometryMaybeCollection=isFeatureCollection?geojson.features[i].geometry:isFeature?geojson.geometry:geojson,featureProperties=isFeatureCollection?geojson.features[i].properties:isFeature?geojson.properties:{},featureBBox=isFeatureCollection?geojson.features[i].bbox:isFeature?geojson.bbox:void 0,featureId=isFeatureCollection?geojson.features[i].id:isFeature?geojson.id:void 0,stopG=(isGeometryCollection=!!geometryMaybeCollection&&"GeometryCollection"===geometryMaybeCollection.type)?geometryMaybeCollection.geometries.length:1,g=0;g<stopG;g++)if(null!==(geometry=isGeometryCollection?geometryMaybeCollection.geometries[g]:geometryMaybeCollection))switch(geometry.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===callback(geometry,featureIndex,featureProperties,featureBBox,featureId))return!1;break;case"GeometryCollection":for(j=0;j<geometry.geometries.length;j++)if(!1===callback(geometry.geometries[j],featureIndex,featureProperties,featureBBox,featureId))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===callback(null,featureIndex,featureProperties,featureBBox,featureId))return!1;featureIndex++}}function es_flattenEach(geojson,callback){es_geomEach(geojson,(function(geometry,featureIndex,properties,bbox,id){var geomType,type=null===geometry?null:geometry.type;switch(type){case null:case"Point":case"LineString":case"Polygon":return!1!==callback(es_feature(geometry,properties,{bbox,id}),featureIndex,0)&&void 0}switch(type){case"MultiPoint":geomType="Point";break;case"MultiLineString":geomType="LineString";break;case"MultiPolygon":geomType="Polygon"}for(var multiFeatureIndex=0;multiFeatureIndex<geometry.coordinates.length;multiFeatureIndex++){var coordinate=geometry.coordinates[multiFeatureIndex];if(!1===callback(es_feature({type:geomType,coordinates:coordinate},properties),featureIndex,multiFeatureIndex))return!1}}))}function es_bbox(geojson){var result=[1/0,1/0,-1/0,-1/0];return es_coordEach(geojson,(function(coord){result[0]>coord[0]&&(result[0]=coord[0]),result[1]>coord[1]&&(result[1]=coord[1]),result[2]<coord[0]&&(result[2]=coord[0]),result[3]<coord[1]&&(result[3]=coord[1])})),result}es_bbox.default=es_bbox;const es=es_bbox;__webpack_require__("../../node_modules/object-assign/index.js");__webpack_require__("../../node_modules/concaveman/index.js");function es_booleanPointInPolygon(point,polygon,options){if(void 0===options&&(options={}),!point)throw new Error("point is required");if(!polygon)throw new Error("polygon is required");var pt=function es_getCoord(coord){if(!coord)throw new Error("coord is required");if(!Array.isArray(coord)){if("Feature"===coord.type&&null!==coord.geometry&&"Point"===coord.geometry.type)return coord.geometry.coordinates;if("Point"===coord.type)return coord.coordinates}if(Array.isArray(coord)&&coord.length>=2&&!Array.isArray(coord[0])&&!Array.isArray(coord[1]))return coord;throw new Error("coord must be GeoJSON Point or an Array of numbers")}(point),geom=function es_getGeom(geojson){return"Feature"===geojson.type?geojson.geometry:geojson}(polygon),type=geom.type,bbox=polygon.bbox,polys=geom.coordinates;if(bbox&&!1===function inBBox(pt,bbox){return bbox[0]<=pt[0]&&bbox[1]<=pt[1]&&bbox[2]>=pt[0]&&bbox[3]>=pt[1]}(pt,bbox))return!1;"Polygon"===type&&(polys=[polys]);for(var insidePoly=!1,i=0;i<polys.length&&!insidePoly;i++)if(inRing(pt,polys[i][0],options.ignoreBoundary)){for(var inHole=!1,k=1;k<polys[i].length&&!inHole;)inRing(pt,polys[i][k],!options.ignoreBoundary)&&(inHole=!0),k++;inHole||(insidePoly=!0)}return insidePoly}function inRing(pt,ring,ignoreBoundary){var isInside=!1;ring[0][0]===ring[ring.length-1][0]&&ring[0][1]===ring[ring.length-1][1]&&(ring=ring.slice(0,ring.length-1));for(var i=0,j=ring.length-1;i<ring.length;j=i++){var xi=ring[i][0],yi=ring[i][1],xj=ring[j][0],yj=ring[j][1];if(pt[1]*(xi-xj)+yi*(xj-pt[0])+yj*(pt[0]-xi)==0&&(xi-pt[0])*(xj-pt[0])<=0&&(yi-pt[1])*(yj-pt[1])<=0)return!ignoreBoundary;yi>pt[1]!=yj>pt[1]&&pt[0]<(xj-xi)*(pt[1]-yi)/(yj-yi)+xi&&(isInside=!isInside)}return isInside}__webpack_require__("../../node_modules/topojson-server/src/index.js");__webpack_require__("../../node_modules/rbush/index.js");!function(){function Spline(options){this.points=options.points||[],this.duration=options.duration||1e4,this.sharpness=options.sharpness||.85,this.centers=[],this.controls=[],this.stepLength=options.stepLength||60,this.length=this.points.length,this.delay=0;for(var i=0;i<this.length;i++)this.points[i].z=this.points[i].z||0;for(i=0;i<this.length-1;i++){var p1=this.points[i],p2=this.points[i+1];this.centers.push({x:(p1.x+p2.x)/2,y:(p1.y+p2.y)/2,z:(p1.z+p2.z)/2})}this.controls.push([this.points[0],this.points[0]]);for(i=0;i<this.centers.length-1;i++){var dx=this.points[i+1].x-(this.centers[i].x+this.centers[i+1].x)/2,dy=this.points[i+1].y-(this.centers[i].y+this.centers[i+1].y)/2,dz=this.points[i+1].z-(this.centers[i].y+this.centers[i+1].z)/2;this.controls.push([{x:(1-this.sharpness)*this.points[i+1].x+this.sharpness*(this.centers[i].x+dx),y:(1-this.sharpness)*this.points[i+1].y+this.sharpness*(this.centers[i].y+dy),z:(1-this.sharpness)*this.points[i+1].z+this.sharpness*(this.centers[i].z+dz)},{x:(1-this.sharpness)*this.points[i+1].x+this.sharpness*(this.centers[i+1].x+dx),y:(1-this.sharpness)*this.points[i+1].y+this.sharpness*(this.centers[i+1].y+dy),z:(1-this.sharpness)*this.points[i+1].z+this.sharpness*(this.centers[i+1].z+dz)}])}return this.controls.push([this.points[this.length-1],this.points[this.length-1]]),this.steps=this.cacheSteps(this.stepLength),this}Spline.prototype.cacheSteps=function(mindist){var steps=[],laststep=this.pos(0);steps.push(0);for(var t=0;t<this.duration;t+=10){var step=this.pos(t);Math.sqrt((step.x-laststep.x)*(step.x-laststep.x)+(step.y-laststep.y)*(step.y-laststep.y)+(step.z-laststep.z)*(step.z-laststep.z))>mindist&&(steps.push(t),laststep=step)}return steps},Spline.prototype.vector=function(t){var p1=this.pos(t+10),p2=this.pos(t-10);return{angle:180*Math.atan2(p1.y-p2.y,p1.x-p2.x)/3.14,speed:Math.sqrt((p2.x-p1.x)*(p2.x-p1.x)+(p2.y-p1.y)*(p2.y-p1.y)+(p2.z-p1.z)*(p2.z-p1.z))}},Spline.prototype.pos=function(time){var t=time-this.delay;t<0&&(t=0),t>this.duration&&(t=this.duration-1);var t2=t/this.duration;if(t2>=1)return this.points[this.length-1];var n=Math.floor((this.points.length-1)*t2);return function bezier(t,p1,c1,c2,p2){var b=function B(t){var t2=t*t,t3=t2*t;return[t3,3*t2*(1-t),3*t*(1-t)*(1-t),(1-t)*(1-t)*(1-t)]}(t);return{x:p2.x*b[0]+c2.x*b[1]+c1.x*b[2]+p1.x*b[3],y:p2.y*b[0]+c2.y*b[1]+c1.y*b[2]+p1.y*b[3],z:p2.z*b[0]+c2.z*b[1]+c1.z*b[2]+p1.z*b[3]}}((this.length-1)*t2-n,this.points[n],this.controls[n][1],this.controls[n+1][0],this.points[n+1])}}();function es_bboxPolygon(bbox,options){void 0===options&&(options={});var west=Number(bbox[0]),south=Number(bbox[1]),east=Number(bbox[2]),north=Number(bbox[3]);if(6===bbox.length)throw new Error("@turf/bbox-polygon does not support BBox with 6 positions");var lowLeft=[west,south];return es_polygon([[lowLeft,[east,south],[east,north],[west,north],lowLeft]],options.properties,{bbox,id:options.id})}const envelope_dist_es=function envelope(geojson){return es_bboxPolygon(es(geojson))};const center_dist_es=function es_center(geojson,options){void 0===options&&(options={});var ext=es(geojson);return es_point([(ext[0]+ext[2])/2,(ext[1]+ext[3])/2],options.properties,options)};__webpack_require__("../../node_modules/earcut/src/earcut.js");__webpack_require__("../../node_modules/geojson-rbush/index.js");var D2R=Math.PI/180,R2D=180/Math.PI,Coord=function(lon,lat){this.lon=lon,this.lat=lat,this.x=D2R*lon,this.y=D2R*lat};Coord.prototype.view=function(){return String(this.lon).slice(0,4)+","+String(this.lat).slice(0,4)},Coord.prototype.antipode=function(){var anti_lat=-1*this.lat,anti_lon=this.lon<0?180+this.lon:-1*(180-this.lon);return new Coord(anti_lon,anti_lat)};var LineString=function(){this.coords=[],this.length=0};LineString.prototype.move_to=function(coord){this.length++,this.coords.push(coord)};var Arc=function(properties){this.properties=properties||{},this.geometries=[]};Arc.prototype.json=function(){if(this.geometries.length<=0)return{geometry:{type:"LineString",coordinates:null},type:"Feature",properties:this.properties};if(1===this.geometries.length)return{geometry:{type:"LineString",coordinates:this.geometries[0].coords},type:"Feature",properties:this.properties};for(var multiline=[],i=0;i<this.geometries.length;i++)multiline.push(this.geometries[i].coords);return{geometry:{type:"MultiLineString",coordinates:multiline},type:"Feature",properties:this.properties}},Arc.prototype.wkt=function(){for(var wkt_string="",wkt="LINESTRING(",collect=function(c){wkt+=c[0]+" "+c[1]+","},i=0;i<this.geometries.length;i++){if(0===this.geometries[i].coords.length)return"LINESTRING(empty)";this.geometries[i].coords.forEach(collect),wkt_string+=wkt.substring(0,wkt.length-1)+")"}return wkt_string};var GreatCircle=function(start,end,properties){if(!start||void 0===start.x||void 0===start.y)throw new Error("GreatCircle constructor expects two args: start and end objects with x and y properties");if(!end||void 0===end.x||void 0===end.y)throw new Error("GreatCircle constructor expects two args: start and end objects with x and y properties");this.start=new Coord(start.x,start.y),this.end=new Coord(end.x,end.y),this.properties=properties||{};var w=this.start.x-this.end.x,h=this.start.y-this.end.y,z=Math.pow(Math.sin(h/2),2)+Math.cos(this.start.y)*Math.cos(this.end.y)*Math.pow(Math.sin(w/2),2);if(this.g=2*Math.asin(Math.sqrt(z)),this.g===Math.PI)throw new Error("it appears "+start.view()+" and "+end.view()+" are 'antipodal', e.g diametrically opposite, thus there is no single route but rather infinite");if(isNaN(this.g))throw new Error("could not calculate great circle between "+start+" and "+end)};GreatCircle.prototype.interpolate=function(f){var A=Math.sin((1-f)*this.g)/Math.sin(this.g),B=Math.sin(f*this.g)/Math.sin(this.g),x=A*Math.cos(this.start.y)*Math.cos(this.start.x)+B*Math.cos(this.end.y)*Math.cos(this.end.x),y=A*Math.cos(this.start.y)*Math.sin(this.start.x)+B*Math.cos(this.end.y)*Math.sin(this.end.x),z=A*Math.sin(this.start.y)+B*Math.sin(this.end.y),lat=R2D*Math.atan2(z,Math.sqrt(Math.pow(x,2)+Math.pow(y,2)));return[R2D*Math.atan2(y,x),lat]},GreatCircle.prototype.Arc=function(npoints,options){var first_pass=[];if(!npoints||npoints<=2)first_pass.push([this.start.lon,this.start.lat]),first_pass.push([this.end.lon,this.end.lat]);else for(var delta=1/(npoints-1),i=0;i<npoints;++i){var step=delta*i,pair=this.interpolate(step);first_pass.push(pair)}for(var bHasBigDiff=!1,dfMaxSmallDiffLong=0,dfDateLineOffset=options&&options.offset?options.offset:10,dfLeftBorderX=180-dfDateLineOffset,dfRightBorderX=-180+dfDateLineOffset,dfDiffSpace=360-dfDateLineOffset,j=1;j<first_pass.length;++j){var dfPrevX=first_pass[j-1][0],dfX=first_pass[j][0],dfDiffLong=Math.abs(dfX-dfPrevX);dfDiffLong>dfDiffSpace&&(dfX>dfLeftBorderX&&dfPrevX<dfRightBorderX||dfPrevX>dfLeftBorderX&&dfX<dfRightBorderX)?bHasBigDiff=!0:dfDiffLong>dfMaxSmallDiffLong&&(dfMaxSmallDiffLong=dfDiffLong)}var poMulti=[];if(bHasBigDiff&&dfMaxSmallDiffLong<dfDateLineOffset){var poNewLS=[];poMulti.push(poNewLS);for(var k=0;k<first_pass.length;++k){var dfX0=parseFloat(first_pass[k][0]);if(k>0&&Math.abs(dfX0-first_pass[k-1][0])>dfDiffSpace){var dfX1=parseFloat(first_pass[k-1][0]),dfY1=parseFloat(first_pass[k-1][1]),dfX2=parseFloat(first_pass[k][0]),dfY2=parseFloat(first_pass[k][1]);if(dfX1>-180&&dfX1<dfRightBorderX&&180===dfX2&&k+1<first_pass.length&&first_pass[k-1][0]>-180&&first_pass[k-1][0]<dfRightBorderX){poNewLS.push([-180,first_pass[k][1]]),k++,poNewLS.push([first_pass[k][0],first_pass[k][1]]);continue}if(dfX1>dfLeftBorderX&&dfX1<180&&-180===dfX2&&k+1<first_pass.length&&first_pass[k-1][0]>dfLeftBorderX&&first_pass[k-1][0]<180){poNewLS.push([180,first_pass[k][1]]),k++,poNewLS.push([first_pass[k][0],first_pass[k][1]]);continue}if(dfX1<dfRightBorderX&&dfX2>dfLeftBorderX){var tmpX=dfX1;dfX1=dfX2,dfX2=tmpX;var tmpY=dfY1;dfY1=dfY2,dfY2=tmpY}if(dfX1>dfLeftBorderX&&dfX2<dfRightBorderX&&(dfX2+=360),dfX1<=180&&dfX2>=180&&dfX1<dfX2){var dfRatio=(180-dfX1)/(dfX2-dfX1),dfY=dfRatio*dfY2+(1-dfRatio)*dfY1;poNewLS.push([first_pass[k-1][0]>dfLeftBorderX?180:-180,dfY]),(poNewLS=[]).push([first_pass[k-1][0]>dfLeftBorderX?-180:180,dfY]),poMulti.push(poNewLS)}else poNewLS=[],poMulti.push(poNewLS);poNewLS.push([dfX0,first_pass[k][1]])}else poNewLS.push([first_pass[k][0],first_pass[k][1]])}}else{var poNewLS0=[];poMulti.push(poNewLS0);for(var l=0;l<first_pass.length;++l)poNewLS0.push([first_pass[l][0],first_pass[l][1]])}for(var arc=new Arc(this.properties),m=0;m<poMulti.length;++m){var line=new LineString;arc.geometries.push(line);for(var points=poMulti[m],j0=0;j0<points.length;++j0)line.move_to(points[j0])}return arc};__webpack_require__("../../node_modules/deep-equal/index.js");var isoBandNextXTL=[],isoBandNextYTL=[],isoBandNextOTL=[],isoBandNextXTR=[],isoBandNextYTR=[],isoBandNextOTR=[],isoBandNextXRT=[],isoBandNextYRT=[],isoBandNextORT=[],isoBandNextXRB=[],isoBandNextYRB=[],isoBandNextORB=[],isoBandNextXBL=[],isoBandNextYBL=[],isoBandNextOBL=[],isoBandNextXBR=[],isoBandNextYBR=[],isoBandNextOBR=[],isoBandNextXLT=[],isoBandNextYLT=[],isoBandNextOLT=[],isoBandNextXLB=[],isoBandNextYLB=[],isoBandNextOLB=[];isoBandNextXRT[85]=isoBandNextXRB[85]=-1,isoBandNextYRT[85]=isoBandNextYRB[85]=0,isoBandNextORT[85]=isoBandNextORB[85]=1,isoBandNextXLT[85]=isoBandNextXLB[85]=1,isoBandNextYLT[85]=isoBandNextYLB[85]=0,isoBandNextOLT[85]=isoBandNextOLB[85]=1,isoBandNextXTL[85]=isoBandNextXTR[85]=0,isoBandNextYTL[85]=isoBandNextYTR[85]=-1,isoBandNextOTL[85]=isoBandNextOBL[85]=0,isoBandNextXBR[85]=isoBandNextXBL[85]=0,isoBandNextYBR[85]=isoBandNextYBL[85]=1,isoBandNextOTR[85]=isoBandNextOBR[85]=1,isoBandNextXLB[1]=isoBandNextXLB[169]=0,isoBandNextYLB[1]=isoBandNextYLB[169]=-1,isoBandNextOLB[1]=isoBandNextOLB[169]=0,isoBandNextXBL[1]=isoBandNextXBL[169]=-1,isoBandNextYBL[1]=isoBandNextYBL[169]=0,isoBandNextOBL[1]=isoBandNextOBL[169]=0,isoBandNextXRB[4]=isoBandNextXRB[166]=0,isoBandNextYRB[4]=isoBandNextYRB[166]=-1,isoBandNextORB[4]=isoBandNextORB[166]=1,isoBandNextXBR[4]=isoBandNextXBR[166]=1,isoBandNextYBR[4]=isoBandNextYBR[166]=0,isoBandNextOBR[4]=isoBandNextOBR[166]=0,isoBandNextXRT[16]=isoBandNextXRT[154]=0,isoBandNextYRT[16]=isoBandNextYRT[154]=1,isoBandNextORT[16]=isoBandNextORT[154]=1,isoBandNextXTR[16]=isoBandNextXTR[154]=1,isoBandNextYTR[16]=isoBandNextYTR[154]=0,isoBandNextOTR[16]=isoBandNextOTR[154]=1,isoBandNextXLT[64]=isoBandNextXLT[106]=0,isoBandNextYLT[64]=isoBandNextYLT[106]=1,isoBandNextOLT[64]=isoBandNextOLT[106]=0,isoBandNextXTL[64]=isoBandNextXTL[106]=-1,isoBandNextYTL[64]=isoBandNextYTL[106]=0,isoBandNextOTL[64]=isoBandNextOTL[106]=1,isoBandNextXLT[2]=isoBandNextXLT[168]=0,isoBandNextYLT[2]=isoBandNextYLT[168]=-1,isoBandNextOLT[2]=isoBandNextOLT[168]=1,isoBandNextXLB[2]=isoBandNextXLB[168]=0,isoBandNextYLB[2]=isoBandNextYLB[168]=-1,isoBandNextOLB[2]=isoBandNextOLB[168]=0,isoBandNextXBL[2]=isoBandNextXBL[168]=-1,isoBandNextYBL[2]=isoBandNextYBL[168]=0,isoBandNextOBL[2]=isoBandNextOBL[168]=0,isoBandNextXBR[2]=isoBandNextXBR[168]=-1,isoBandNextYBR[2]=isoBandNextYBR[168]=0,isoBandNextOBR[2]=isoBandNextOBR[168]=1,isoBandNextXRT[8]=isoBandNextXRT[162]=0,isoBandNextYRT[8]=isoBandNextYRT[162]=-1,isoBandNextORT[8]=isoBandNextORT[162]=0,isoBandNextXRB[8]=isoBandNextXRB[162]=0,isoBandNextYRB[8]=isoBandNextYRB[162]=-1,isoBandNextORB[8]=isoBandNextORB[162]=1,isoBandNextXBL[8]=isoBandNextXBL[162]=1,isoBandNextYBL[8]=isoBandNextYBL[162]=0,isoBandNextOBL[8]=isoBandNextOBL[162]=1,isoBandNextXBR[8]=isoBandNextXBR[162]=1,isoBandNextYBR[8]=isoBandNextYBR[162]=0,isoBandNextOBR[8]=isoBandNextOBR[162]=0,isoBandNextXRT[32]=isoBandNextXRT[138]=0,isoBandNextYRT[32]=isoBandNextYRT[138]=1,isoBandNextORT[32]=isoBandNextORT[138]=1,isoBandNextXRB[32]=isoBandNextXRB[138]=0,isoBandNextYRB[32]=isoBandNextYRB[138]=1,isoBandNextORB[32]=isoBandNextORB[138]=0,isoBandNextXTL[32]=isoBandNextXTL[138]=1,isoBandNextYTL[32]=isoBandNextYTL[138]=0,isoBandNextOTL[32]=isoBandNextOTL[138]=0,isoBandNextXTR[32]=isoBandNextXTR[138]=1,isoBandNextYTR[32]=isoBandNextYTR[138]=0,isoBandNextOTR[32]=isoBandNextOTR[138]=1,isoBandNextXLB[128]=isoBandNextXLB[42]=0,isoBandNextYLB[128]=isoBandNextYLB[42]=1,isoBandNextOLB[128]=isoBandNextOLB[42]=1,isoBandNextXLT[128]=isoBandNextXLT[42]=0,isoBandNextYLT[128]=isoBandNextYLT[42]=1,isoBandNextOLT[128]=isoBandNextOLT[42]=0,isoBandNextXTL[128]=isoBandNextXTL[42]=-1,isoBandNextYTL[128]=isoBandNextYTL[42]=0,isoBandNextOTL[128]=isoBandNextOTL[42]=1,isoBandNextXTR[128]=isoBandNextXTR[42]=-1,isoBandNextYTR[128]=isoBandNextYTR[42]=0,isoBandNextOTR[128]=isoBandNextOTR[42]=0,isoBandNextXRB[5]=isoBandNextXRB[165]=-1,isoBandNextYRB[5]=isoBandNextYRB[165]=0,isoBandNextORB[5]=isoBandNextORB[165]=0,isoBandNextXLB[5]=isoBandNextXLB[165]=1,isoBandNextYLB[5]=isoBandNextYLB[165]=0,isoBandNextOLB[5]=isoBandNextOLB[165]=0,isoBandNextXBR[20]=isoBandNextXBR[150]=0,isoBandNextYBR[20]=isoBandNextYBR[150]=1,isoBandNextOBR[20]=isoBandNextOBR[150]=1,isoBandNextXTR[20]=isoBandNextXTR[150]=0,isoBandNextYTR[20]=isoBandNextYTR[150]=-1,isoBandNextOTR[20]=isoBandNextOTR[150]=1,isoBandNextXRT[80]=isoBandNextXRT[90]=-1,isoBandNextYRT[80]=isoBandNextYRT[90]=0,isoBandNextORT[80]=isoBandNextORT[90]=1,isoBandNextXLT[80]=isoBandNextXLT[90]=1,isoBandNextYLT[80]=isoBandNextYLT[90]=0,isoBandNextOLT[80]=isoBandNextOLT[90]=1,isoBandNextXBL[65]=isoBandNextXBL[105]=0,isoBandNextYBL[65]=isoBandNextYBL[105]=1,isoBandNextOBL[65]=isoBandNextOBL[105]=0,isoBandNextXTL[65]=isoBandNextXTL[105]=0,isoBandNextYTL[65]=isoBandNextYTL[105]=-1,isoBandNextOTL[65]=isoBandNextOTL[105]=0,isoBandNextXRT[160]=isoBandNextXRT[10]=-1,isoBandNextYRT[160]=isoBandNextYRT[10]=0,isoBandNextORT[160]=isoBandNextORT[10]=1,isoBandNextXRB[160]=isoBandNextXRB[10]=-1,isoBandNextYRB[160]=isoBandNextYRB[10]=0,isoBandNextORB[160]=isoBandNextORB[10]=0,isoBandNextXLB[160]=isoBandNextXLB[10]=1,isoBandNextYLB[160]=isoBandNextYLB[10]=0,isoBandNextOLB[160]=isoBandNextOLB[10]=0,isoBandNextXLT[160]=isoBandNextXLT[10]=1,isoBandNextYLT[160]=isoBandNextYLT[10]=0,isoBandNextOLT[160]=isoBandNextOLT[10]=1,isoBandNextXBR[130]=isoBandNextXBR[40]=0,isoBandNextYBR[130]=isoBandNextYBR[40]=1,isoBandNextOBR[130]=isoBandNextOBR[40]=1,isoBandNextXBL[130]=isoBandNextXBL[40]=0,isoBandNextYBL[130]=isoBandNextYBL[40]=1,isoBandNextOBL[130]=isoBandNextOBL[40]=0,isoBandNextXTL[130]=isoBandNextXTL[40]=0,isoBandNextYTL[130]=isoBandNextYTL[40]=-1,isoBandNextOTL[130]=isoBandNextOTL[40]=0,isoBandNextXTR[130]=isoBandNextXTR[40]=0,isoBandNextYTR[130]=isoBandNextYTR[40]=-1,isoBandNextOTR[130]=isoBandNextOTR[40]=1,isoBandNextXRB[37]=isoBandNextXRB[133]=0,isoBandNextYRB[37]=isoBandNextYRB[133]=1,isoBandNextORB[37]=isoBandNextORB[133]=1,isoBandNextXLB[37]=isoBandNextXLB[133]=0,isoBandNextYLB[37]=isoBandNextYLB[133]=1,isoBandNextOLB[37]=isoBandNextOLB[133]=0,isoBandNextXTL[37]=isoBandNextXTL[133]=-1,isoBandNextYTL[37]=isoBandNextYTL[133]=0,isoBandNextOTL[37]=isoBandNextOTL[133]=0,isoBandNextXTR[37]=isoBandNextXTR[133]=1,isoBandNextYTR[37]=isoBandNextYTR[133]=0,isoBandNextOTR[37]=isoBandNextOTR[133]=0,isoBandNextXBR[148]=isoBandNextXBR[22]=-1,isoBandNextYBR[148]=isoBandNextYBR[22]=0,isoBandNextOBR[148]=isoBandNextOBR[22]=0,isoBandNextXLB[148]=isoBandNextXLB[22]=0,isoBandNextYLB[148]=isoBandNextYLB[22]=-1,isoBandNextOLB[148]=isoBandNextOLB[22]=1,isoBandNextXLT[148]=isoBandNextXLT[22]=0,isoBandNextYLT[148]=isoBandNextYLT[22]=1,isoBandNextOLT[148]=isoBandNextOLT[22]=1,isoBandNextXTR[148]=isoBandNextXTR[22]=-1,isoBandNextYTR[148]=isoBandNextYTR[22]=0,isoBandNextOTR[148]=isoBandNextOTR[22]=1,isoBandNextXRT[82]=isoBandNextXRT[88]=0,isoBandNextYRT[82]=isoBandNextYRT[88]=-1,isoBandNextORT[82]=isoBandNextORT[88]=1,isoBandNextXBR[82]=isoBandNextXBR[88]=1,isoBandNextYBR[82]=isoBandNextYBR[88]=0,isoBandNextOBR[82]=isoBandNextOBR[88]=1,isoBandNextXBL[82]=isoBandNextXBL[88]=-1,isoBandNextYBL[82]=isoBandNextYBL[88]=0,isoBandNextOBL[82]=isoBandNextOBL[88]=1,isoBandNextXLT[82]=isoBandNextXLT[88]=0,isoBandNextYLT[82]=isoBandNextYLT[88]=-1,isoBandNextOLT[82]=isoBandNextOLT[88]=0,isoBandNextXRT[73]=isoBandNextXRT[97]=0,isoBandNextYRT[73]=isoBandNextYRT[97]=1,isoBandNextORT[73]=isoBandNextORT[97]=0,isoBandNextXRB[73]=isoBandNextXRB[97]=0,isoBandNextYRB[73]=isoBandNextYRB[97]=-1,isoBandNextORB[73]=isoBandNextORB[97]=0,isoBandNextXBL[73]=isoBandNextXBL[97]=1,isoBandNextYBL[73]=isoBandNextYBL[97]=0,isoBandNextOBL[73]=isoBandNextOBL[97]=0,isoBandNextXTL[73]=isoBandNextXTL[97]=1,isoBandNextYTL[73]=isoBandNextYTL[97]=0,isoBandNextOTL[73]=isoBandNextOTL[97]=1,isoBandNextXRT[145]=isoBandNextXRT[25]=0,isoBandNextYRT[145]=isoBandNextYRT[25]=-1,isoBandNextORT[145]=isoBandNextORT[25]=0,isoBandNextXBL[145]=isoBandNextXBL[25]=1,isoBandNextYBL[145]=isoBandNextYBL[25]=0,isoBandNextOBL[145]=isoBandNextOBL[25]=1,isoBandNextXLB[145]=isoBandNextXLB[25]=0,isoBandNextYLB[145]=isoBandNextYLB[25]=1,isoBandNextOLB[145]=isoBandNextOLB[25]=1,isoBandNextXTR[145]=isoBandNextXTR[25]=-1,isoBandNextYTR[145]=isoBandNextYTR[25]=0,isoBandNextOTR[145]=isoBandNextOTR[25]=0,isoBandNextXRB[70]=isoBandNextXRB[100]=0,isoBandNextYRB[70]=isoBandNextYRB[100]=1,isoBandNextORB[70]=isoBandNextORB[100]=0,isoBandNextXBR[70]=isoBandNextXBR[100]=-1,isoBandNextYBR[70]=isoBandNextYBR[100]=0,isoBandNextOBR[70]=isoBandNextOBR[100]=1,isoBandNextXLT[70]=isoBandNextXLT[100]=0,isoBandNextYLT[70]=isoBandNextYLT[100]=-1,isoBandNextOLT[70]=isoBandNextOLT[100]=1,isoBandNextXTL[70]=isoBandNextXTL[100]=1,isoBandNextYTL[70]=isoBandNextYTL[100]=0,isoBandNextOTL[70]=isoBandNextOTL[100]=0,isoBandNextXRB[101]=isoBandNextXRB[69]=0,isoBandNextYRB[101]=isoBandNextYRB[69]=1,isoBandNextORB[101]=isoBandNextORB[69]=0,isoBandNextXTL[101]=isoBandNextXTL[69]=1,isoBandNextYTL[101]=isoBandNextYTL[69]=0,isoBandNextOTL[101]=isoBandNextOTL[69]=0,isoBandNextXLB[149]=isoBandNextXLB[21]=0,isoBandNextYLB[149]=isoBandNextYLB[21]=1,isoBandNextOLB[149]=isoBandNextOLB[21]=1,isoBandNextXTR[149]=isoBandNextXTR[21]=-1,isoBandNextYTR[149]=isoBandNextYTR[21]=0,isoBandNextOTR[149]=isoBandNextOTR[21]=0,isoBandNextXBR[86]=isoBandNextXBR[84]=-1,isoBandNextYBR[86]=isoBandNextYBR[84]=0,isoBandNextOBR[86]=isoBandNextOBR[84]=1,isoBandNextXLT[86]=isoBandNextXLT[84]=0,isoBandNextYLT[86]=isoBandNextYLT[84]=-1,isoBandNextOLT[86]=isoBandNextOLT[84]=1,isoBandNextXRT[89]=isoBandNextXRT[81]=0,isoBandNextYRT[89]=isoBandNextYRT[81]=-1,isoBandNextORT[89]=isoBandNextORT[81]=0,isoBandNextXBL[89]=isoBandNextXBL[81]=1,isoBandNextYBL[89]=isoBandNextYBL[81]=0,isoBandNextOBL[89]=isoBandNextOBL[81]=1,isoBandNextXRT[96]=isoBandNextXRT[74]=0,isoBandNextYRT[96]=isoBandNextYRT[74]=1,isoBandNextORT[96]=isoBandNextORT[74]=0,isoBandNextXRB[96]=isoBandNextXRB[74]=-1,isoBandNextYRB[96]=isoBandNextYRB[74]=0,isoBandNextORB[96]=isoBandNextORB[74]=1,isoBandNextXLT[96]=isoBandNextXLT[74]=1,isoBandNextYLT[96]=isoBandNextYLT[74]=0,isoBandNextOLT[96]=isoBandNextOLT[74]=0,isoBandNextXTL[96]=isoBandNextXTL[74]=1,isoBandNextYTL[96]=isoBandNextYTL[74]=0,isoBandNextOTL[96]=isoBandNextOTL[74]=1,isoBandNextXRT[24]=isoBandNextXRT[146]=0,isoBandNextYRT[24]=isoBandNextYRT[146]=-1,isoBandNextORT[24]=isoBandNextORT[146]=1,isoBandNextXBR[24]=isoBandNextXBR[146]=1,isoBandNextYBR[24]=isoBandNextYBR[146]=0,isoBandNextOBR[24]=isoBandNextOBR[146]=1,isoBandNextXBL[24]=isoBandNextXBL[146]=0,isoBandNextYBL[24]=isoBandNextYBL[146]=1,isoBandNextOBL[24]=isoBandNextOBL[146]=1,isoBandNextXTR[24]=isoBandNextXTR[146]=0,isoBandNextYTR[24]=isoBandNextYTR[146]=-1,isoBandNextOTR[24]=isoBandNextOTR[146]=0,isoBandNextXRB[6]=isoBandNextXRB[164]=-1,isoBandNextYRB[6]=isoBandNextYRB[164]=0,isoBandNextORB[6]=isoBandNextORB[164]=1,isoBandNextXBR[6]=isoBandNextXBR[164]=-1,isoBandNextYBR[6]=isoBandNextYBR[164]=0,isoBandNextOBR[6]=isoBandNextOBR[164]=0,isoBandNextXLB[6]=isoBandNextXLB[164]=0,isoBandNextYLB[6]=isoBandNextYLB[164]=-1,isoBandNextOLB[6]=isoBandNextOLB[164]=1,isoBandNextXLT[6]=isoBandNextXLT[164]=1,isoBandNextYLT[6]=isoBandNextYLT[164]=0,isoBandNextOLT[6]=isoBandNextOLT[164]=0,isoBandNextXBL[129]=isoBandNextXBL[41]=0,isoBandNextYBL[129]=isoBandNextYBL[41]=1,isoBandNextOBL[129]=isoBandNextOBL[41]=1,isoBandNextXLB[129]=isoBandNextXLB[41]=0,isoBandNextYLB[129]=isoBandNextYLB[41]=1,isoBandNextOLB[129]=isoBandNextOLB[41]=0,isoBandNextXTL[129]=isoBandNextXTL[41]=-1,isoBandNextYTL[129]=isoBandNextYTL[41]=0,isoBandNextOTL[129]=isoBandNextOTL[41]=0,isoBandNextXTR[129]=isoBandNextXTR[41]=0,isoBandNextYTR[129]=isoBandNextYTR[41]=-1,isoBandNextOTR[129]=isoBandNextOTR[41]=0,isoBandNextXBR[66]=isoBandNextXBR[104]=0,isoBandNextYBR[66]=isoBandNextYBR[104]=1,isoBandNextOBR[66]=isoBandNextOBR[104]=0,isoBandNextXBL[66]=isoBandNextXBL[104]=-1,isoBandNextYBL[66]=isoBandNextYBL[104]=0,isoBandNextOBL[66]=isoBandNextOBL[104]=1,isoBandNextXLT[66]=isoBandNextXLT[104]=0,isoBandNextYLT[66]=isoBandNextYLT[104]=-1,isoBandNextOLT[66]=isoBandNextOLT[104]=0,isoBandNextXTL[66]=isoBandNextXTL[104]=0,isoBandNextYTL[66]=isoBandNextYTL[104]=-1,isoBandNextOTL[66]=isoBandNextOTL[104]=1,isoBandNextXRT[144]=isoBandNextXRT[26]=-1,isoBandNextYRT[144]=isoBandNextYRT[26]=0,isoBandNextORT[144]=isoBandNextORT[26]=0,isoBandNextXLB[144]=isoBandNextXLB[26]=1,isoBandNextYLB[144]=isoBandNextYLB[26]=0,isoBandNextOLB[144]=isoBandNextOLB[26]=1,isoBandNextXLT[144]=isoBandNextXLT[26]=0,isoBandNextYLT[144]=isoBandNextYLT[26]=1,isoBandNextOLT[144]=isoBandNextOLT[26]=1,isoBandNextXTR[144]=isoBandNextXTR[26]=-1,isoBandNextYTR[144]=isoBandNextYTR[26]=0,isoBandNextOTR[144]=isoBandNextOTR[26]=1,isoBandNextXRB[36]=isoBandNextXRB[134]=0,isoBandNextYRB[36]=isoBandNextYRB[134]=1,isoBandNextORB[36]=isoBandNextORB[134]=1,isoBandNextXBR[36]=isoBandNextXBR[134]=0,isoBandNextYBR[36]=isoBandNextYBR[134]=1,isoBandNextOBR[36]=isoBandNextOBR[134]=0,isoBandNextXTL[36]=isoBandNextXTL[134]=0,isoBandNextYTL[36]=isoBandNextYTL[134]=-1,isoBandNextOTL[36]=isoBandNextOTL[134]=1,isoBandNextXTR[36]=isoBandNextXTR[134]=1,isoBandNextYTR[36]=isoBandNextYTR[134]=0,isoBandNextOTR[36]=isoBandNextOTR[134]=0,isoBandNextXRT[9]=isoBandNextXRT[161]=-1,isoBandNextYRT[9]=isoBandNextYRT[161]=0,isoBandNextORT[9]=isoBandNextORT[161]=0,isoBandNextXRB[9]=isoBandNextXRB[161]=0,isoBandNextYRB[9]=isoBandNextYRB[161]=-1,isoBandNextORB[9]=isoBandNextORB[161]=0,isoBandNextXBL[9]=isoBandNextXBL[161]=1,isoBandNextYBL[9]=isoBandNextYBL[161]=0,isoBandNextOBL[9]=isoBandNextOBL[161]=0,isoBandNextXLB[9]=isoBandNextXLB[161]=1,isoBandNextYLB[9]=isoBandNextYLB[161]=0,isoBandNextOLB[9]=isoBandNextOLB[161]=1,isoBandNextXRT[136]=0,isoBandNextYRT[136]=1,isoBandNextORT[136]=1,isoBandNextXRB[136]=0,isoBandNextYRB[136]=1,isoBandNextORB[136]=0,isoBandNextXBR[136]=-1,isoBandNextYBR[136]=0,isoBandNextOBR[136]=1,isoBandNextXBL[136]=-1,isoBandNextYBL[136]=0,isoBandNextOBL[136]=0,isoBandNextXLB[136]=0,isoBandNextYLB[136]=-1,isoBandNextOLB[136]=0,isoBandNextXLT[136]=0,isoBandNextYLT[136]=-1,isoBandNextOLT[136]=1,isoBandNextXTL[136]=1,isoBandNextYTL[136]=0,isoBandNextOTL[136]=0,isoBandNextXTR[136]=1,isoBandNextYTR[136]=0,isoBandNextOTR[136]=1,isoBandNextXRT[34]=0,isoBandNextYRT[34]=-1,isoBandNextORT[34]=0,isoBandNextXRB[34]=0,isoBandNextYRB[34]=-1,isoBandNextORB[34]=1,isoBandNextXBR[34]=1,isoBandNextYBR[34]=0,isoBandNextOBR[34]=0,isoBandNextXBL[34]=1,isoBandNextYBL[34]=0,isoBandNextOBL[34]=1,isoBandNextXLB[34]=0,isoBandNextYLB[34]=1,isoBandNextOLB[34]=1,isoBandNextXLT[34]=0,isoBandNextYLT[34]=1,isoBandNextOLT[34]=0,isoBandNextXTL[34]=-1,isoBandNextYTL[34]=0,isoBandNextOTL[34]=1,isoBandNextXTR[34]=-1,isoBandNextYTR[34]=0,isoBandNextOTR[34]=0,isoBandNextXRT[35]=0,isoBandNextYRT[35]=1,isoBandNextORT[35]=1,isoBandNextXRB[35]=0,isoBandNextYRB[35]=-1,isoBandNextORB[35]=1,isoBandNextXBR[35]=1,isoBandNextYBR[35]=0,isoBandNextOBR[35]=0,isoBandNextXBL[35]=-1,isoBandNextYBL[35]=0,isoBandNextOBL[35]=0,isoBandNextXLB[35]=0,isoBandNextYLB[35]=-1,isoBandNextOLB[35]=0,isoBandNextXLT[35]=0,isoBandNextYLT[35]=1,isoBandNextOLT[35]=0,isoBandNextXTL[35]=-1,isoBandNextYTL[35]=0,isoBandNextOTL[35]=1,isoBandNextXTR[35]=1,isoBandNextYTR[35]=0,isoBandNextOTR[35]=1,isoBandNextXRT[153]=0,isoBandNextYRT[153]=1,isoBandNextORT[153]=1,isoBandNextXBL[153]=-1,isoBandNextYBL[153]=0,isoBandNextOBL[153]=0,isoBandNextXLB[153]=0,isoBandNextYLB[153]=-1,isoBandNextOLB[153]=0,isoBandNextXTR[153]=1,isoBandNextYTR[153]=0,isoBandNextOTR[153]=1,isoBandNextXRB[102]=0,isoBandNextYRB[102]=-1,isoBandNextORB[102]=1,isoBandNextXBR[102]=1,isoBandNextYBR[102]=0,isoBandNextOBR[102]=0,isoBandNextXLT[102]=0,isoBandNextYLT[102]=1,isoBandNextOLT[102]=0,isoBandNextXTL[102]=-1,isoBandNextYTL[102]=0,isoBandNextOTL[102]=1,isoBandNextXRT[155]=0,isoBandNextYRT[155]=-1,isoBandNextORT[155]=0,isoBandNextXBL[155]=1,isoBandNextYBL[155]=0,isoBandNextOBL[155]=1,isoBandNextXLB[155]=0,isoBandNextYLB[155]=1,isoBandNextOLB[155]=1,isoBandNextXTR[155]=-1,isoBandNextYTR[155]=0,isoBandNextOTR[155]=0,isoBandNextXRB[103]=0,isoBandNextYRB[103]=1,isoBandNextORB[103]=0,isoBandNextXBR[103]=-1,isoBandNextYBR[103]=0,isoBandNextOBR[103]=1,isoBandNextXLT[103]=0,isoBandNextYLT[103]=-1,isoBandNextOLT[103]=1,isoBandNextXTL[103]=1,isoBandNextYTL[103]=0,isoBandNextOTL[103]=0,isoBandNextXRT[152]=0,isoBandNextYRT[152]=1,isoBandNextORT[152]=1,isoBandNextXBR[152]=-1,isoBandNextYBR[152]=0,isoBandNextOBR[152]=1,isoBandNextXBL[152]=-1,isoBandNextYBL[152]=0,isoBandNextOBL[152]=0,isoBandNextXLB[152]=0,isoBandNextYLB[152]=-1,isoBandNextOLB[152]=0,isoBandNextXLT[152]=0,isoBandNextYLT[152]=-1,isoBandNextOLT[152]=1,isoBandNextXTR[152]=1,isoBandNextYTR[152]=0,isoBandNextOTR[152]=1,isoBandNextXRT[156]=0,isoBandNextYRT[156]=-1,isoBandNextORT[156]=1,isoBandNextXBR[156]=1,isoBandNextYBR[156]=0,isoBandNextOBR[156]=1,isoBandNextXBL[156]=-1,isoBandNextYBL[156]=0,isoBandNextOBL[156]=0,isoBandNextXLB[156]=0,isoBandNextYLB[156]=-1,isoBandNextOLB[156]=0,isoBandNextXLT[156]=0,isoBandNextYLT[156]=1,isoBandNextOLT[156]=1,isoBandNextXTR[156]=-1,isoBandNextYTR[156]=0,isoBandNextOTR[156]=1,isoBandNextXRT[137]=0,isoBandNextYRT[137]=1,isoBandNextORT[137]=1,isoBandNextXRB[137]=0,isoBandNextYRB[137]=1,isoBandNextORB[137]=0,isoBandNextXBL[137]=-1,isoBandNextYBL[137]=0,isoBandNextOBL[137]=0,isoBandNextXLB[137]=0,isoBandNextYLB[137]=-1,isoBandNextOLB[137]=0,isoBandNextXTL[137]=1,isoBandNextYTL[137]=0,isoBandNextOTL[137]=0,isoBandNextXTR[137]=1,isoBandNextYTR[137]=0,isoBandNextOTR[137]=1,isoBandNextXRT[139]=0,isoBandNextYRT[139]=1,isoBandNextORT[139]=1,isoBandNextXRB[139]=0,isoBandNextYRB[139]=-1,isoBandNextORB[139]=0,isoBandNextXBL[139]=1,isoBandNextYBL[139]=0,isoBandNextOBL[139]=0,isoBandNextXLB[139]=0,isoBandNextYLB[139]=1,isoBandNextOLB[139]=0,isoBandNextXTL[139]=-1,isoBandNextYTL[139]=0,isoBandNextOTL[139]=0,isoBandNextXTR[139]=1,isoBandNextYTR[139]=0,isoBandNextOTR[139]=1,isoBandNextXRT[98]=0,isoBandNextYRT[98]=-1,isoBandNextORT[98]=0,isoBandNextXRB[98]=0,isoBandNextYRB[98]=-1,isoBandNextORB[98]=1,isoBandNextXBR[98]=1,isoBandNextYBR[98]=0,isoBandNextOBR[98]=0,isoBandNextXBL[98]=1,isoBandNextYBL[98]=0,isoBandNextOBL[98]=1,isoBandNextXLT[98]=0,isoBandNextYLT[98]=1,isoBandNextOLT[98]=0,isoBandNextXTL[98]=-1,isoBandNextYTL[98]=0,isoBandNextOTL[98]=1,isoBandNextXRT[99]=0,isoBandNextYRT[99]=1,isoBandNextORT[99]=0,isoBandNextXRB[99]=0,isoBandNextYRB[99]=-1,isoBandNextORB[99]=1,isoBandNextXBR[99]=1,isoBandNextYBR[99]=0,isoBandNextOBR[99]=0,isoBandNextXBL[99]=-1,isoBandNextYBL[99]=0,isoBandNextOBL[99]=1,isoBandNextXLT[99]=0,isoBandNextYLT[99]=-1,isoBandNextOLT[99]=0,isoBandNextXTL[99]=1,isoBandNextYTL[99]=0,isoBandNextOTL[99]=1,isoBandNextXRB[38]=0,isoBandNextYRB[38]=-1,isoBandNextORB[38]=1,isoBandNextXBR[38]=1,isoBandNextYBR[38]=0,isoBandNextOBR[38]=0,isoBandNextXLB[38]=0,isoBandNextYLB[38]=1,isoBandNextOLB[38]=1,isoBandNextXLT[38]=0,isoBandNextYLT[38]=1,isoBandNextOLT[38]=0,isoBandNextXTL[38]=-1,isoBandNextYTL[38]=0,isoBandNextOTL[38]=1,isoBandNextXTR[38]=-1,isoBandNextYTR[38]=0,isoBandNextOTR[38]=0,isoBandNextXRB[39]=0,isoBandNextYRB[39]=1,isoBandNextORB[39]=1,isoBandNextXBR[39]=-1,isoBandNextYBR[39]=0,isoBandNextOBR[39]=0,isoBandNextXLB[39]=0,isoBandNextYLB[39]=-1,isoBandNextOLB[39]=1,isoBandNextXLT[39]=0,isoBandNextYLT[39]=1,isoBandNextOLT[39]=0,isoBandNextXTL[39]=-1,isoBandNextYTL[39]=0,isoBandNextOTL[39]=1,isoBandNextXTR[39]=1,isoBandNextYTR[39]=0,isoBandNextOTR[39]=0;var p00=function(cell){return[[cell.bottomleft,0],[0,0],[0,cell.leftbottom]]},p01=function(cell){return[[1,cell.rightbottom],[1,0],[cell.bottomright,0]]},p02=function(cell){return[[cell.topright,1],[1,1],[1,cell.righttop]]},p03=function(cell){return[[0,cell.lefttop],[0,1],[cell.topleft,1]]},p04=function(cell){return[[cell.bottomright,0],[cell.bottomleft,0],[0,cell.leftbottom],[0,cell.lefttop]]},p05=function(cell){return[[cell.bottomright,0],[cell.bottomleft,0],[1,cell.righttop],[1,cell.rightbottom]]},p06=function(cell){return[[1,cell.righttop],[1,cell.rightbottom],[cell.topleft,1],[cell.topright,1]]},p07=function(cell){return[[0,cell.leftbottom],[0,cell.lefttop],[cell.topleft,1],[cell.topright,1]]},isoBandEdgeRT=[],isoBandEdgeRB=[],isoBandEdgeBR=[],isoBandEdgeBL=[],isoBandEdgeLB=[],isoBandEdgeLT=[],isoBandEdgeTL=[],isoBandEdgeTR=[];isoBandEdgeBL[1]=isoBandEdgeLB[1]=18,isoBandEdgeBL[169]=isoBandEdgeLB[169]=18,isoBandEdgeBR[4]=isoBandEdgeRB[4]=12,isoBandEdgeBR[166]=isoBandEdgeRB[166]=12,isoBandEdgeRT[16]=isoBandEdgeTR[16]=4,isoBandEdgeRT[154]=isoBandEdgeTR[154]=4,isoBandEdgeLT[64]=isoBandEdgeTL[64]=22,isoBandEdgeLT[106]=isoBandEdgeTL[106]=22,isoBandEdgeBR[2]=isoBandEdgeLT[2]=17,isoBandEdgeBL[2]=isoBandEdgeLB[2]=18,isoBandEdgeBR[168]=isoBandEdgeLT[168]=17,isoBandEdgeBL[168]=isoBandEdgeLB[168]=18,isoBandEdgeRT[8]=isoBandEdgeBL[8]=9,isoBandEdgeRB[8]=isoBandEdgeBR[8]=12,isoBandEdgeRT[162]=isoBandEdgeBL[162]=9,isoBandEdgeRB[162]=isoBandEdgeBR[162]=12,isoBandEdgeRT[32]=isoBandEdgeTR[32]=4,isoBandEdgeRB[32]=isoBandEdgeTL[32]=1,isoBandEdgeRT[138]=isoBandEdgeTR[138]=4,isoBandEdgeRB[138]=isoBandEdgeTL[138]=1,isoBandEdgeLB[128]=isoBandEdgeTR[128]=21,isoBandEdgeLT[128]=isoBandEdgeTL[128]=22,isoBandEdgeLB[42]=isoBandEdgeTR[42]=21,isoBandEdgeLT[42]=isoBandEdgeTL[42]=22,isoBandEdgeRB[5]=isoBandEdgeLB[5]=14,isoBandEdgeRB[165]=isoBandEdgeLB[165]=14,isoBandEdgeBR[20]=isoBandEdgeTR[20]=6,isoBandEdgeBR[150]=isoBandEdgeTR[150]=6,isoBandEdgeRT[80]=isoBandEdgeLT[80]=11,isoBandEdgeRT[90]=isoBandEdgeLT[90]=11,isoBandEdgeBL[65]=isoBandEdgeTL[65]=3,isoBandEdgeBL[105]=isoBandEdgeTL[105]=3,isoBandEdgeRT[160]=isoBandEdgeLT[160]=11,isoBandEdgeRB[160]=isoBandEdgeLB[160]=14,isoBandEdgeRT[10]=isoBandEdgeLT[10]=11,isoBandEdgeRB[10]=isoBandEdgeLB[10]=14,isoBandEdgeBR[130]=isoBandEdgeTR[130]=6,isoBandEdgeBL[130]=isoBandEdgeTL[130]=3,isoBandEdgeBR[40]=isoBandEdgeTR[40]=6,isoBandEdgeBL[40]=isoBandEdgeTL[40]=3,isoBandEdgeRB[101]=isoBandEdgeTL[101]=1,isoBandEdgeRB[69]=isoBandEdgeTL[69]=1,isoBandEdgeLB[149]=isoBandEdgeTR[149]=21,isoBandEdgeLB[21]=isoBandEdgeTR[21]=21,isoBandEdgeBR[86]=isoBandEdgeLT[86]=17,isoBandEdgeBR[84]=isoBandEdgeLT[84]=17,isoBandEdgeRT[89]=isoBandEdgeBL[89]=9,isoBandEdgeRT[81]=isoBandEdgeBL[81]=9,isoBandEdgeRT[96]=isoBandEdgeTL[96]=0,isoBandEdgeRB[96]=isoBandEdgeLT[96]=15,isoBandEdgeRT[74]=isoBandEdgeTL[74]=0,isoBandEdgeRB[74]=isoBandEdgeLT[74]=15,isoBandEdgeRT[24]=isoBandEdgeBR[24]=8,isoBandEdgeBL[24]=isoBandEdgeTR[24]=7,isoBandEdgeRT[146]=isoBandEdgeBR[146]=8,isoBandEdgeBL[146]=isoBandEdgeTR[146]=7,isoBandEdgeRB[6]=isoBandEdgeLT[6]=15,isoBandEdgeBR[6]=isoBandEdgeLB[6]=16,isoBandEdgeRB[164]=isoBandEdgeLT[164]=15,isoBandEdgeBR[164]=isoBandEdgeLB[164]=16,isoBandEdgeBL[129]=isoBandEdgeTR[129]=7,isoBandEdgeLB[129]=isoBandEdgeTL[129]=20,isoBandEdgeBL[41]=isoBandEdgeTR[41]=7,isoBandEdgeLB[41]=isoBandEdgeTL[41]=20,isoBandEdgeBR[66]=isoBandEdgeTL[66]=2,isoBandEdgeBL[66]=isoBandEdgeLT[66]=19,isoBandEdgeBR[104]=isoBandEdgeTL[104]=2,isoBandEdgeBL[104]=isoBandEdgeLT[104]=19,isoBandEdgeRT[144]=isoBandEdgeLB[144]=10,isoBandEdgeLT[144]=isoBandEdgeTR[144]=23,isoBandEdgeRT[26]=isoBandEdgeLB[26]=10,isoBandEdgeLT[26]=isoBandEdgeTR[26]=23,isoBandEdgeRB[36]=isoBandEdgeTR[36]=5,isoBandEdgeBR[36]=isoBandEdgeTL[36]=2,isoBandEdgeRB[134]=isoBandEdgeTR[134]=5,isoBandEdgeBR[134]=isoBandEdgeTL[134]=2,isoBandEdgeRT[9]=isoBandEdgeLB[9]=10,isoBandEdgeRB[9]=isoBandEdgeBL[9]=13,isoBandEdgeRT[161]=isoBandEdgeLB[161]=10,isoBandEdgeRB[161]=isoBandEdgeBL[161]=13,isoBandEdgeRB[37]=isoBandEdgeTR[37]=5,isoBandEdgeLB[37]=isoBandEdgeTL[37]=20,isoBandEdgeRB[133]=isoBandEdgeTR[133]=5,isoBandEdgeLB[133]=isoBandEdgeTL[133]=20,isoBandEdgeBR[148]=isoBandEdgeLB[148]=16,isoBandEdgeLT[148]=isoBandEdgeTR[148]=23,isoBandEdgeBR[22]=isoBandEdgeLB[22]=16,isoBandEdgeLT[22]=isoBandEdgeTR[22]=23,isoBandEdgeRT[82]=isoBandEdgeBR[82]=8,isoBandEdgeBL[82]=isoBandEdgeLT[82]=19,isoBandEdgeRT[88]=isoBandEdgeBR[88]=8,isoBandEdgeBL[88]=isoBandEdgeLT[88]=19,isoBandEdgeRT[73]=isoBandEdgeTL[73]=0,isoBandEdgeRB[73]=isoBandEdgeBL[73]=13,isoBandEdgeRT[97]=isoBandEdgeTL[97]=0,isoBandEdgeRB[97]=isoBandEdgeBL[97]=13,isoBandEdgeRT[145]=isoBandEdgeBL[145]=9,isoBandEdgeLB[145]=isoBandEdgeTR[145]=21,isoBandEdgeRT[25]=isoBandEdgeBL[25]=9,isoBandEdgeLB[25]=isoBandEdgeTR[25]=21,isoBandEdgeRB[70]=isoBandEdgeTL[70]=1,isoBandEdgeBR[70]=isoBandEdgeLT[70]=17,isoBandEdgeRB[100]=isoBandEdgeTL[100]=1,isoBandEdgeBR[100]=isoBandEdgeLT[100]=17,isoBandEdgeRT[34]=isoBandEdgeBL[34]=9,isoBandEdgeRB[34]=isoBandEdgeBR[34]=12,isoBandEdgeLB[34]=isoBandEdgeTR[34]=21,isoBandEdgeLT[34]=isoBandEdgeTL[34]=22,isoBandEdgeRT[136]=isoBandEdgeTR[136]=4,isoBandEdgeRB[136]=isoBandEdgeTL[136]=1,isoBandEdgeBR[136]=isoBandEdgeLT[136]=17,isoBandEdgeBL[136]=isoBandEdgeLB[136]=18,isoBandEdgeRT[35]=isoBandEdgeTR[35]=4,isoBandEdgeRB[35]=isoBandEdgeBR[35]=12,isoBandEdgeBL[35]=isoBandEdgeLB[35]=18,isoBandEdgeLT[35]=isoBandEdgeTL[35]=22,isoBandEdgeRT[153]=isoBandEdgeTR[153]=4,isoBandEdgeBL[153]=isoBandEdgeLB[153]=18,isoBandEdgeRB[102]=isoBandEdgeBR[102]=12,isoBandEdgeLT[102]=isoBandEdgeTL[102]=22,isoBandEdgeRT[155]=isoBandEdgeBL[155]=9,isoBandEdgeLB[155]=isoBandEdgeTR[155]=23,isoBandEdgeRB[103]=isoBandEdgeTL[103]=1,isoBandEdgeBR[103]=isoBandEdgeLT[103]=17,isoBandEdgeRT[152]=isoBandEdgeTR[152]=4,isoBandEdgeBR[152]=isoBandEdgeLT[152]=17,isoBandEdgeBL[152]=isoBandEdgeLB[152]=18,isoBandEdgeRT[156]=isoBandEdgeBR[156]=8,isoBandEdgeBL[156]=isoBandEdgeLB[156]=18,isoBandEdgeLT[156]=isoBandEdgeTR[156]=23,isoBandEdgeRT[137]=isoBandEdgeTR[137]=4,isoBandEdgeRB[137]=isoBandEdgeTL[137]=1,isoBandEdgeBL[137]=isoBandEdgeLB[137]=18,isoBandEdgeRT[139]=isoBandEdgeTR[139]=4,isoBandEdgeRB[139]=isoBandEdgeBL[139]=13,isoBandEdgeLB[139]=isoBandEdgeTL[139]=20,isoBandEdgeRT[98]=isoBandEdgeBL[98]=9,isoBandEdgeRB[98]=isoBandEdgeBR[98]=12,isoBandEdgeLT[98]=isoBandEdgeTL[98]=22,isoBandEdgeRT[99]=isoBandEdgeTL[99]=0,isoBandEdgeRB[99]=isoBandEdgeBR[99]=12,isoBandEdgeBL[99]=isoBandEdgeLT[99]=19,isoBandEdgeRB[38]=isoBandEdgeBR[38]=12,isoBandEdgeLB[38]=isoBandEdgeTR[38]=21,isoBandEdgeLT[38]=isoBandEdgeTL[38]=22,isoBandEdgeRB[39]=isoBandEdgeTR[39]=5,isoBandEdgeBR[39]=isoBandEdgeLB[39]=16,isoBandEdgeLT[39]=isoBandEdgeTL[39]=22;var polygon_table=[];polygon_table[1]=polygon_table[169]=p00,polygon_table[4]=polygon_table[166]=p01,polygon_table[16]=polygon_table[154]=p02,polygon_table[64]=polygon_table[106]=p03,polygon_table[168]=polygon_table[2]=p04,polygon_table[162]=polygon_table[8]=p05,polygon_table[138]=polygon_table[32]=p06,polygon_table[42]=polygon_table[128]=p07,polygon_table[5]=polygon_table[165]=function(cell){return[[0,0],[0,cell.leftbottom],[1,cell.rightbottom],[1,0]]},polygon_table[20]=polygon_table[150]=function(cell){return[[1,0],[cell.bottomright,0],[cell.topright,1],[1,1]]},polygon_table[80]=polygon_table[90]=function(cell){return[[1,1],[1,cell.righttop],[0,cell.lefttop],[0,1]]},polygon_table[65]=polygon_table[105]=function(cell){return[[cell.bottomleft,0],[0,0],[0,1],[cell.topleft,1]]},polygon_table[160]=polygon_table[10]=function(cell){return[[1,cell.righttop],[1,cell.rightbottom],[0,cell.leftbottom],[0,cell.lefttop]]},polygon_table[130]=polygon_table[40]=function(cell){return[[cell.topleft,1],[cell.topright,1],[cell.bottomright,0],[cell.bottomleft,0]]},polygon_table[85]=function(){return[[0,0],[0,1],[1,1],[1,0]]},polygon_table[101]=polygon_table[69]=function(cell){return[[1,cell.rightbottom],[1,0],[0,0],[0,1],[cell.topleft,1]]},polygon_table[149]=polygon_table[21]=function(cell){return[[cell.topright,1],[1,1],[1,0],[0,0],[0,cell.leftbottom]]},polygon_table[86]=polygon_table[84]=function(cell){return[[1,0],[cell.bottomright,0],[0,cell.lefttop],[0,1],[1,1]]},polygon_table[89]=polygon_table[81]=function(cell){return[[1,1],[1,cell.righttop],[cell.bottomleft,0],[0,0],[0,1]]},polygon_table[96]=polygon_table[74]=function(cell){return[[1,cell.righttop],[1,cell.rightbottom],[0,cell.lefttop],[0,1],[cell.topleft,1]]},polygon_table[24]=polygon_table[146]=function(cell){return[[1,1],[1,cell.righttop],[cell.bottomright,0],[cell.bottomleft,0],[cell.topright,1]]},polygon_table[6]=polygon_table[164]=function(cell){return[[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.leftbottom],[0,cell.lefttop]]},polygon_table[129]=polygon_table[41]=function(cell){return[[cell.topright,1],[cell.bottomleft,0],[0,0],[0,cell.leftbottom],[cell.topleft,1]]},polygon_table[66]=polygon_table[104]=function(cell){return[[cell.bottomright,0],[cell.bottomleft,0],[0,cell.lefttop],[0,1],[cell.topleft,1]]},polygon_table[144]=polygon_table[26]=function(cell){return[[1,1],[1,cell.righttop],[0,cell.leftbottom],[0,cell.lefttop],[cell.topright,1]]},polygon_table[36]=polygon_table[134]=function(cell){return[[1,cell.rightbottom],[1,0],[cell.bottomright,0],[cell.topleft,1],[cell.topright,1]]},polygon_table[9]=polygon_table[161]=function(cell){return[[1,cell.righttop],[1,cell.rightbottom],[cell.bottomleft,0],[0,0],[0,cell.leftbottom]]},polygon_table[37]=polygon_table[133]=function(cell){return[[1,cell.rightbottom],[1,0],[0,0],[0,cell.leftbottom],[cell.topleft,1],[cell.topright,1]]},polygon_table[148]=polygon_table[22]=function(cell){return[[1,1],[1,0],[cell.bottomright,0],[0,cell.leftbottom],[0,cell.lefttop],[cell.topright,1]]},polygon_table[82]=polygon_table[88]=function(cell){return[[1,1],[1,cell.righttop],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.lefttop],[0,1]]},polygon_table[73]=polygon_table[97]=function(cell){return[[1,cell.righttop],[1,cell.rightbottom],[cell.bottomleft,0],[0,0],[0,1],[cell.topleft,1]]},polygon_table[145]=polygon_table[25]=function(cell){return[[1,1],[1,cell.righttop],[cell.bottomleft,0],[0,0],[0,cell.leftbottom],[cell.topright,1]]},polygon_table[70]=polygon_table[100]=function(cell){return[[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.lefttop],[0,1],[cell.topleft,1]]},polygon_table[34]=function(c){return[p07(c),p05(c)]},polygon_table[35]=function(cell){return[[1,cell.righttop],[1,cell.rightbottom],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.leftbottom],[0,cell.lefttop],[cell.topleft,1],[cell.topright,1]]},polygon_table[136]=function(c){return[p06(c),p04(c)]},polygon_table[153]=function(c){return[p02(c),p00(c)]},polygon_table[102]=function(c){return[p01(c),p03(c)]},polygon_table[155]=function(cell){return[[1,1],[1,cell.righttop],[cell.bottomleft,0],[0,0],[0,cell.leftbottom],[cell.topright,1]]},polygon_table[103]=function(cell){return[[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.lefttop],[0,1],[cell.topleft,1]]},polygon_table[152]=function(c){return[p02(c),p04(c)]},polygon_table[156]=function(cell){return[[1,1],[1,cell.righttop],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.leftbottom],[0,cell.lefttop],[cell.topright,1]]},polygon_table[137]=function(c){return[p06(c),p00(c)]},polygon_table[139]=function(cell){return[[1,cell.righttop],[1,cell.rightbottom],[cell.bottomleft,0],[0,0],[0,cell.leftbottom],[cell.topleft,1],[cell.topright,1]]},polygon_table[98]=function(c){return[p05(c),p03(c)]},polygon_table[99]=function(cell){return[[1,cell.righttop],[1,cell.rightbottom],[cell.bottomright,0],[cell.bottomleft,0],[0,cell.lefttop],[0,1],[cell.topleft,1]]},polygon_table[38]=function(c){return[p01(c),p07(c)]},polygon_table[39]=function(cell){return[[1,cell.rightbottom],[1,0],[cell.bottomright,0],[0,cell.leftbottom],[0,cell.lefttop],[cell.topleft,1],[cell.topright,1]]};function orientationIndex(p1,p2,q){var dx1=p2[0]-p1[0],dy1=p2[1]-p1[1],dx2=q[0]-p2[0];return function mathSign(x){return(x>0)-(x<0)||+x}(dx1*(q[1]-p2[1])-dx2*dy1)}function envelopeContains(self,env){return env.geometry.coordinates[0].every((function(c){return es_booleanPointInPolygon(es_point(c),self)}))}const lib_Node=function(){function Node(coordinates){this.id=Node.buildId(coordinates),this.coordinates=coordinates,this.innerEdges=[],this.outerEdges=[],this.outerEdgesSorted=!1}return Node.buildId=function(coordinates){return coordinates.join(",")},Node.prototype.removeInnerEdge=function(edge){this.innerEdges=this.innerEdges.filter((function(e){return e.from.id!==edge.from.id}))},Node.prototype.removeOuterEdge=function(edge){this.outerEdges=this.outerEdges.filter((function(e){return e.to.id!==edge.to.id}))},Node.prototype.addOuterEdge=function(edge){this.outerEdges.push(edge),this.outerEdgesSorted=!1},Node.prototype.sortOuterEdges=function(){var _this=this;this.outerEdgesSorted||(this.outerEdges.sort((function(a,b){var aNode=a.to,bNode=b.to;if(aNode.coordinates[0]-_this.coordinates[0]>=0&&bNode.coordinates[0]-_this.coordinates[0]<0)return 1;if(aNode.coordinates[0]-_this.coordinates[0]<0&&bNode.coordinates[0]-_this.coordinates[0]>=0)return-1;if(aNode.coordinates[0]-_this.coordinates[0]==0&&bNode.coordinates[0]-_this.coordinates[0]==0)return aNode.coordinates[1]-_this.coordinates[1]>=0||bNode.coordinates[1]-_this.coordinates[1]>=0?aNode.coordinates[1]-bNode.coordinates[1]:bNode.coordinates[1]-aNode.coordinates[1];var det=orientationIndex(_this.coordinates,aNode.coordinates,bNode.coordinates);return det<0?1:det>0?-1:Math.pow(aNode.coordinates[0]-_this.coordinates[0],2)+Math.pow(aNode.coordinates[1]-_this.coordinates[1],2)-(Math.pow(bNode.coordinates[0]-_this.coordinates[0],2)+Math.pow(bNode.coordinates[1]-_this.coordinates[1],2))})),this.outerEdgesSorted=!0)},Node.prototype.getOuterEdges=function(){return this.sortOuterEdges(),this.outerEdges},Node.prototype.getOuterEdge=function(i){return this.sortOuterEdges(),this.outerEdges[i]},Node.prototype.addInnerEdge=function(edge){this.innerEdges.push(edge)},Node}();const lib_Edge=function(){function Edge(from,to){this.from=from,this.to=to,this.next=void 0,this.label=void 0,this.symetric=void 0,this.ring=void 0,this.from.addOuterEdge(this),this.to.addInnerEdge(this)}return Edge.prototype.getSymetric=function(){return this.symetric||(this.symetric=new Edge(this.to,this.from),this.symetric.symetric=this),this.symetric},Edge.prototype.deleteEdge=function(){this.from.removeOuterEdge(this),this.to.removeInnerEdge(this)},Edge.prototype.isEqual=function(edge){return this.from.id===edge.from.id&&this.to.id===edge.to.id},Edge.prototype.toString=function(){return"Edge { "+this.from.id+" -> "+this.to.id+" }"},Edge.prototype.toLineString=function(){return es_lineString([this.from.coordinates,this.to.coordinates])},Edge.prototype.compareTo=function(edge){return orientationIndex(edge.from.coordinates,edge.to.coordinates,this.to.coordinates)},Edge}();const lib_EdgeRing=function(){function EdgeRing(){this.edges=[],this.polygon=void 0,this.envelope=void 0}return EdgeRing.prototype.push=function(edge){this.edges.push(edge),this.polygon=this.envelope=void 0},EdgeRing.prototype.get=function(i){return this.edges[i]},Object.defineProperty(EdgeRing.prototype,"length",{get:function(){return this.edges.length},enumerable:!0,configurable:!0}),EdgeRing.prototype.forEach=function(f){this.edges.forEach(f)},EdgeRing.prototype.map=function(f){return this.edges.map(f)},EdgeRing.prototype.some=function(f){return this.edges.some(f)},EdgeRing.prototype.isValid=function(){return!0},EdgeRing.prototype.isHole=function(){var _this=this,hiIndex=this.edges.reduce((function(high,edge,i){return edge.from.coordinates[1]>_this.edges[high].from.coordinates[1]&&(high=i),high}),0),iPrev=(0===hiIndex?this.length:hiIndex)-1,iNext=(hiIndex+1)%this.length,disc=orientationIndex(this.edges[iPrev].from.coordinates,this.edges[hiIndex].from.coordinates,this.edges[iNext].from.coordinates);return 0===disc?this.edges[iPrev].from.coordinates[0]>this.edges[iNext].from.coordinates[0]:disc>0},EdgeRing.prototype.toMultiPoint=function(){return es_multiPoint(this.edges.map((function(edge){return edge.from.coordinates})))},EdgeRing.prototype.toPolygon=function(){if(this.polygon)return this.polygon;var coordinates=this.edges.map((function(edge){return edge.from.coordinates}));return coordinates.push(this.edges[0].from.coordinates),this.polygon=es_polygon([coordinates])},EdgeRing.prototype.getEnvelope=function(){return this.envelope?this.envelope:this.envelope=envelope_dist_es(this.toPolygon())},EdgeRing.findEdgeRingContaining=function(testEdgeRing,shellList){var minEnvelope,minShell,testEnvelope=testEdgeRing.getEnvelope();return shellList.forEach((function(shell){var tryEnvelope=shell.getEnvelope();if(minShell&&(minEnvelope=minShell.getEnvelope()),!function envelopeIsEqual(env1,env2){var envX1=env1.geometry.coordinates[0].map((function(c){return c[0]})),envY1=env1.geometry.coordinates[0].map((function(c){return c[1]})),envX2=env2.geometry.coordinates[0].map((function(c){return c[0]})),envY2=env2.geometry.coordinates[0].map((function(c){return c[1]}));return Math.max.apply(null,envX1)===Math.max.apply(null,envX2)&&Math.max.apply(null,envY1)===Math.max.apply(null,envY2)&&Math.min.apply(null,envX1)===Math.min.apply(null,envX2)&&Math.min.apply(null,envY1)===Math.min.apply(null,envY2)}(tryEnvelope,testEnvelope)&&envelopeContains(tryEnvelope,testEnvelope)){for(var testEdgeRingCoordinates=testEdgeRing.map((function(edge){return edge.from.coordinates})),testPoint=void 0,_loop_1=function(pt){shell.some((function(edge){return function coordinatesEqual(coord1,coord2){return coord1[0]===coord2[0]&&coord1[1]===coord2[1]}(pt,edge.from.coordinates)}))||(testPoint=pt)},_i=0,testEdgeRingCoordinates_1=testEdgeRingCoordinates;_i<testEdgeRingCoordinates_1.length;_i++){_loop_1(testEdgeRingCoordinates_1[_i])}testPoint&&shell.inside(es_point(testPoint))&&(minShell&&!envelopeContains(minEnvelope,tryEnvelope)||(minShell=shell))}})),minShell},EdgeRing.prototype.inside=function(pt){return es_booleanPointInPolygon(pt,this.toPolygon())},EdgeRing}();!function(){function Graph(){this.edges=[],this.nodes={}}Graph.fromGeoJson=function(geoJson){!function validateGeoJson(geoJson){if(!geoJson)throw new Error("No geojson passed");if("FeatureCollection"!==geoJson.type&&"GeometryCollection"!==geoJson.type&&"MultiLineString"!==geoJson.type&&"LineString"!==geoJson.type&&"Feature"!==geoJson.type)throw new Error("Invalid input type '"+geoJson.type+"'. Geojson must be FeatureCollection, GeometryCollection, LineString, MultiLineString or Feature")}(geoJson);var graph=new Graph;return es_flattenEach(geoJson,(function(feature){!function es_featureOf(feature,type,name){if(!feature)throw new Error("No feature passed");if(!name)throw new Error(".featureOf() requires a name");if(!feature||"Feature"!==feature.type||!feature.geometry)throw new Error("Invalid input to "+name+", Feature with geometry required");if(!feature.geometry||feature.geometry.type!==type)throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}(feature,"LineString","Graph::fromGeoJson"),function coordReduce(geojson,callback,initialValue,excludeWrapCoord){var previousValue=initialValue;return es_coordEach(geojson,(function(currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex){previousValue=0===coordIndex&&void 0===initialValue?currentCoord:callback(previousValue,currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex)}),excludeWrapCoord),previousValue}(feature,(function(prev,cur){if(prev){var start=graph.getNode(prev),end=graph.getNode(cur);graph.addEdge(start,end)}return cur}))})),graph},Graph.prototype.getNode=function(coordinates){var id=lib_Node.buildId(coordinates),node=this.nodes[id];return node||(node=this.nodes[id]=new lib_Node(coordinates)),node},Graph.prototype.addEdge=function(from,to){var edge=new lib_Edge(from,to),symetricEdge=edge.getSymetric();this.edges.push(edge),this.edges.push(symetricEdge)},Graph.prototype.deleteDangles=function(){var _this=this;Object.keys(this.nodes).map((function(id){return _this.nodes[id]})).forEach((function(node){return _this._removeIfDangle(node)}))},Graph.prototype._removeIfDangle=function(node){var _this=this;if(node.innerEdges.length<=1){var outerNodes=node.getOuterEdges().map((function(e){return e.to}));this.removeNode(node),outerNodes.forEach((function(n){return _this._removeIfDangle(n)}))}},Graph.prototype.deleteCutEdges=function(){var _this=this;this._computeNextCWEdges(),this._findLabeledEdgeRings(),this.edges.forEach((function(edge){edge.label===edge.symetric.label&&(_this.removeEdge(edge.symetric),_this.removeEdge(edge))}))},Graph.prototype._computeNextCWEdges=function(node){var _this=this;void 0===node?Object.keys(this.nodes).forEach((function(id){return _this._computeNextCWEdges(_this.nodes[id])})):node.getOuterEdges().forEach((function(edge,i){node.getOuterEdge((0===i?node.getOuterEdges().length:i)-1).symetric.next=edge}))},Graph.prototype._computeNextCCWEdges=function(node,label){for(var firstOutDE,prevInDE,edges=node.getOuterEdges(),i=edges.length-1;i>=0;--i){var de=edges[i],sym=de.symetric,outDE=void 0,inDE=void 0;de.label===label&&(outDE=de),sym.label===label&&(inDE=sym),outDE&&inDE&&(inDE&&(prevInDE=inDE),outDE&&(prevInDE&&(prevInDE.next=outDE,prevInDE=void 0),firstOutDE||(firstOutDE=outDE)))}prevInDE&&(prevInDE.next=firstOutDE)},Graph.prototype._findLabeledEdgeRings=function(){var edgeRingStarts=[],label=0;return this.edges.forEach((function(edge){if(!(edge.label>=0)){edgeRingStarts.push(edge);var e=edge;do{e.label=label,e=e.next}while(!edge.isEqual(e));label++}})),edgeRingStarts},Graph.prototype.getEdgeRings=function(){var _this=this;this._computeNextCWEdges(),this.edges.forEach((function(edge){edge.label=void 0})),this._findLabeledEdgeRings().forEach((function(edge){_this._findIntersectionNodes(edge).forEach((function(node){_this._computeNextCCWEdges(node,edge.label)}))}));var edgeRingList=[];return this.edges.forEach((function(edge){edge.ring||edgeRingList.push(_this._findEdgeRing(edge))})),edgeRingList},Graph.prototype._findIntersectionNodes=function(startEdge){var intersectionNodes=[],edge=startEdge,_loop_1=function(){var degree=0;edge.from.getOuterEdges().forEach((function(e){e.label===startEdge.label&&++degree})),degree>1&&intersectionNodes.push(edge.from),edge=edge.next};do{_loop_1()}while(!startEdge.isEqual(edge));return intersectionNodes},Graph.prototype._findEdgeRing=function(startEdge){var edge=startEdge,edgeRing=new lib_EdgeRing;do{edgeRing.push(edge),edge.ring=edgeRing,edge=edge.next}while(!startEdge.isEqual(edge));return edgeRing},Graph.prototype.removeNode=function(node){var _this=this;node.getOuterEdges().forEach((function(edge){return _this.removeEdge(edge)})),node.innerEdges.forEach((function(edge){return _this.removeEdge(edge)})),delete this.nodes[node.id]},Graph.prototype.removeEdge=function(edge){this.edges=this.edges.filter((function(e){return!e.isEqual(edge)})),edge.deleteEdge()}}();__webpack_require__("../../node_modules/geojson-equality/index.js");__webpack_require__("../../node_modules/density-clustering/lib/index.js");__webpack_require__("../../node_modules/skmeans/dist/node/main.js");function pathTo(node){for(var curr=node,path=[];curr.parent;)path.unshift(curr),curr=curr.parent;return path}var astar={search:function(graph,start,end,options){graph.cleanDirty();var heuristic=(options=options||{}).heuristic||astar.heuristics.manhattan,closest=options.closest||!1,openHeap=function getHeap(){return new BinaryHeap((function(node){return node.f}))}(),closestNode=start;for(start.h=heuristic(start,end),openHeap.push(start);openHeap.size()>0;){var currentNode=openHeap.pop();if(currentNode===end)return pathTo(currentNode);currentNode.closed=!0;for(var neighbors=graph.neighbors(currentNode),i=0,il=neighbors.length;i<il;++i){var neighbor=neighbors[i];if(!neighbor.closed&&!neighbor.isWall()){var gScore=currentNode.g+neighbor.getCost(currentNode),beenVisited=neighbor.visited;(!beenVisited||gScore<neighbor.g)&&(neighbor.visited=!0,neighbor.parent=currentNode,neighbor.h=neighbor.h||heuristic(neighbor,end),neighbor.g=gScore,neighbor.f=neighbor.g+neighbor.h,graph.markDirty(neighbor),closest&&(neighbor.h<closestNode.h||neighbor.h===closestNode.h&&neighbor.g<closestNode.g)&&(closestNode=neighbor),beenVisited?openHeap.rescoreElement(neighbor):openHeap.push(neighbor))}}}return closest?pathTo(closestNode):[]},heuristics:{manhattan:function(pos0,pos1){return Math.abs(pos1.x-pos0.x)+Math.abs(pos1.y-pos0.y)},diagonal:function(pos0,pos1){var D2=Math.sqrt(2),d1=Math.abs(pos1.x-pos0.x),d2=Math.abs(pos1.y-pos0.y);return 1*(d1+d2)+(D2-2)*Math.min(d1,d2)}},cleanNode:function(node){node.f=0,node.g=0,node.h=0,node.visited=!1,node.closed=!1,node.parent=null}};function es_Graph(gridIn,options){options=options||{},this.nodes=[],this.diagonal=!!options.diagonal,this.grid=[];for(var x=0;x<gridIn.length;x++){this.grid[x]=[];for(var y=0,row=gridIn[x];y<row.length;y++){var node=new GridNode(x,y,row[y]);this.grid[x][y]=node,this.nodes.push(node)}}this.init()}function GridNode(x,y,weight){this.x=x,this.y=y,this.weight=weight}function BinaryHeap(scoreFunction){this.content=[],this.scoreFunction=scoreFunction}es_Graph.prototype.init=function(){this.dirtyNodes=[];for(var i=0;i<this.nodes.length;i++)astar.cleanNode(this.nodes[i])},es_Graph.prototype.cleanDirty=function(){for(var i=0;i<this.dirtyNodes.length;i++)astar.cleanNode(this.dirtyNodes[i]);this.dirtyNodes=[]},es_Graph.prototype.markDirty=function(node){this.dirtyNodes.push(node)},es_Graph.prototype.neighbors=function(node){var ret=[],x=node.x,y=node.y,grid=this.grid;return grid[x-1]&&grid[x-1][y]&&ret.push(grid[x-1][y]),grid[x+1]&&grid[x+1][y]&&ret.push(grid[x+1][y]),grid[x]&&grid[x][y-1]&&ret.push(grid[x][y-1]),grid[x]&&grid[x][y+1]&&ret.push(grid[x][y+1]),this.diagonal&&(grid[x-1]&&grid[x-1][y-1]&&ret.push(grid[x-1][y-1]),grid[x+1]&&grid[x+1][y-1]&&ret.push(grid[x+1][y-1]),grid[x-1]&&grid[x-1][y+1]&&ret.push(grid[x-1][y+1]),grid[x+1]&&grid[x+1][y+1]&&ret.push(grid[x+1][y+1])),ret},es_Graph.prototype.toString=function(){for(var rowDebug,row,y,l,graphString=[],nodes=this.grid,x=0,len=nodes.length;x<len;x++){for(rowDebug=[],y=0,l=(row=nodes[x]).length;y<l;y++)rowDebug.push(row[y].weight);graphString.push(rowDebug.join(" "))}return graphString.join("\n")},GridNode.prototype.toString=function(){return"["+this.x+" "+this.y+"]"},GridNode.prototype.getCost=function(fromNeighbor){return fromNeighbor&&fromNeighbor.x!==this.x&&fromNeighbor.y!==this.y?1.41421*this.weight:this.weight},GridNode.prototype.isWall=function(){return 0===this.weight},BinaryHeap.prototype={push:function(element){this.content.push(element),this.sinkDown(this.content.length-1)},pop:function(){var result=this.content[0],end=this.content.pop();return this.content.length>0&&(this.content[0]=end,this.bubbleUp(0)),result},remove:function(node){var i=this.content.indexOf(node),end=this.content.pop();i!==this.content.length-1&&(this.content[i]=end,this.scoreFunction(end)<this.scoreFunction(node)?this.sinkDown(i):this.bubbleUp(i))},size:function(){return this.content.length},rescoreElement:function(node){this.sinkDown(this.content.indexOf(node))},sinkDown:function(n){for(var element=this.content[n];n>0;){var parentN=(n+1>>1)-1,parent=this.content[parentN];if(!(this.scoreFunction(element)<this.scoreFunction(parent)))break;this.content[parentN]=element,this.content[n]=parent,n=parentN}},bubbleUp:function(n){for(var length=this.content.length,element=this.content[n],elemScore=this.scoreFunction(element);;){var child1Score,child2N=n+1<<1,child1N=child2N-1,swap=null;if(child1N<length){var child1=this.content[child1N];(child1Score=this.scoreFunction(child1))<elemScore&&(swap=child1N)}if(child2N<length){var child2=this.content[child2N];this.scoreFunction(child2)<(null===swap?elemScore:child1Score)&&(swap=child2N)}if(null===swap)break;this.content[n]=this.content[swap],this.content[swap]=element,n=swap}}};__webpack_require__("../../node_modules/d3-voronoi/index.js");__webpack_require__("../../node_modules/polygon-clipping/dist/polygon-clipping.umd.js");var jsts_min=__webpack_require__("../../node_modules/turf-jsts/jsts.min.js"),d3_geo=__webpack_require__("../../node_modules/d3-geo/index.js");function bufferFeature(geojson,radius,units,steps){var properties=geojson.properties||{},geometry="Feature"===geojson.type?geojson.geometry:geojson;if("GeometryCollection"===geometry.type){var results=[];return es_geomEach(geojson,(function(geometry){var buffered=bufferFeature(geometry,radius,units,steps);buffered&&results.push(buffered)})),es_featureCollection(results)}var projection=function defineProjection(geojson){var coords=center_dist_es(geojson).geometry.coordinates,rotation=[-coords[0],-coords[1]];return(0,d3_geo.geoAzimuthalEquidistant)().rotate(rotation).scale(es_earthRadius)}(geometry),projected={type:geometry.type,coordinates:projectCoords(geometry.coordinates,projection)},geom=(new jsts_min.GeoJSONReader).read(projected),distance=es_radiansToLength(es_lengthToRadians(radius,units),"meters"),buffered=jsts_min.BufferOp.bufferOp(geom,distance,steps);if(!coordsIsNaN((buffered=(new jsts_min.GeoJSONWriter).write(buffered)).coordinates))return es_feature({type:buffered.type,coordinates:unprojectCoords(buffered.coordinates,projection)},properties)}function coordsIsNaN(coords){return Array.isArray(coords[0])?coordsIsNaN(coords[0]):isNaN(coords[0])}function projectCoords(coords,proj){return"object"!=typeof coords[0]?proj(coords):coords.map((function(coord){return projectCoords(coord,proj)}))}function unprojectCoords(coords,proj){return"object"!=typeof coords[0]?proj.invert(coords):coords.map((function(coord){return unprojectCoords(coord,proj)}))}const buffer_dist_es=function buffer(geojson,radius,options){var units=(options=options||{}).units||"kilometers",steps=options.steps||8;if(!geojson)throw new Error("geojson is required");if("object"!=typeof options)throw new Error("options must be an object");if("number"!=typeof steps)throw new Error("steps must be an number");if(void 0===radius)throw new Error("radius is required");if(steps<=0)throw new Error("steps must be greater than 0");var results=[];switch(geojson.type){case"GeometryCollection":return es_geomEach(geojson,(function(geometry){var buffered=bufferFeature(geometry,radius,units,steps);buffered&&results.push(buffered)})),es_featureCollection(results);case"FeatureCollection":return es_featureEach(geojson,(function(feature){var multiBuffered=bufferFeature(feature,radius,units,steps);multiBuffered&&es_featureEach(multiBuffered,(function(buffered){buffered&&results.push(buffered)}))})),es_featureCollection(results)}return bufferFeature(geojson,radius,units,steps)}}}]);