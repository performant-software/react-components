import{j as a}from"./jsx-runtime-BTCK_S7S.js";import"./index.es33-Brp4LGM6.js";import{r}from"./index-CBqU2yxZ.js";import{T as b}from"./index.es11-idiWBoAT.js";import{R as g,T as h,a as v,P as y,b as x,c as w,d as C,C as k,A as j}from"./index-CocxV-QK.js";import{c as s}from"./clsx-B-dksMZM.js";import{_ as f}from"./index-default-C_maRo4o.js";import{C as N,a as T}from"./chevron-right-CMF72FsN.js";const c=e=>{const[u,m]=r.useState(!1),[o,i]=r.useState(!1),{clearTimer:n,setTimer:l}=b();return r.useEffect(()=>{u&&(i(!0),n(),l(()=>i(!1)))},[e.value]),r.useEffect(()=>{u||m(!0)},[e.value]),a.jsx(y,{children:a.jsxs(x,{open:o,children:[a.jsx(w,{asChild:!0,children:a.jsx(C,{className:s("block h-5 w-5 rounded-full bg-gray-600","focus:outline-none focus-visible:ring focus-visible:ring-black focus-visible:ring-opacity-30",e.className),onFocus:()=>i(!0),onBlur:()=>i(!1),onMouseEnter:()=>i(!0),onMouseLeave:()=>i(!1)})}),a.jsxs(k,{side:e.position,sideOffset:5,children:[a.jsx("div",{className:"bg-white p-2 text-black rounded-md shadow-md shadow-gray-1000",children:e.value}),a.jsx(j,{className:"fill-white"})]})]})})};c.defaultProps={position:"top"};const d=e=>{const{clearTimer:u,setTimer:m}=b(),o=r.useCallback(()=>{const[n,l]=e.value;let t=n-e.step;t<e.min&&(t=e.min),e.onValueChange([t,l]),e.onValueCommit&&(u(),m(()=>e.onValueCommit([t,l])))},[e.min,e.onValueChange,e.onValueCommit,e.step,e.value]),i=r.useCallback(()=>{const[n,l]=e.value;let t=l+e.step;t>e.max&&(t=e.max),e.onValueChange([n,t]),e.onValueCommit&&(u(),m(()=>e.onValueCommit([n,t])))},[e.max,e.onValueChange,e.onValueCommit,e.step,e.value]);return a.jsxs(a.Fragment,{children:[a.jsxs("div",{className:"flex justify-between items-center pt-4",children:[a.jsx("button",{"aria-label":"Slider Left",className:s("px-3 py-3",e.classNames.button),onClick:o,type:"button",children:a.jsx(N,{})}),a.jsxs(g,{className:s("relative flex flex-grow h-5 touch-none items-center w-full",e.classNames.root),max:e.max,min:e.min,minStepsBetweenThumbs:1,onValueChange:e.onValueChange,onValueCommit:e.onValueCommit,step:1,value:e.value,children:[a.jsx(h,{className:s("relative h-1 w-full grow bg-gray-100",e.classNames.track),children:a.jsx(v,{className:s("absolute h-full bg-gray-600",e.classNames.range)})}),a.jsx(c,{className:e.classNames.thumb,position:e.position,value:e.value[0]}),a.jsx(c,{className:e.classNames.thumb,position:e.position,value:e.value[1]})]}),a.jsx("button",{"aria-label":"Slider Right",className:s("px-3 py-3",e.classNames.button),onClick:i,type:"button",children:a.jsx(T,{})})]}),a.jsxs("div",{className:"flex justify-between w-full px-12",children:[a.jsx("div",{children:e.min}),a.jsx("div",{children:e.max})]}),!f.isEmpty(e.actions)&&a.jsx("div",{className:s("flex justify-center items-center w-full py-3 text-gray-600",e.classNames.zoom),children:f.map(e.actions,(n,l)=>a.jsx("button",{"aria-label":n.label,className:s("p-3",n.className),onClick:n.onClick,type:"button",children:n.icon},l))})]})};d.defaultProps={classNames:{},step:1,value:[]};const P=d;d.__docgenInfo={description:"",methods:[],displayName:"FacetSlider",props:{actions:{required:!1,flowType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  /**
   * Class name to apply to the button element.
   */
  className?: string,

  /**
   * (Optional) icon to render inside the button element.
   */
  icon?: JSX.Element,

  /**
   * Button label.
   */
  label: string,

  /**
   * Callback fired when the button is clicked.
   */
  onClick: () => void
}`,signature:{properties:[{key:"className",value:{name:"string",required:!1},description:"Class name to apply to the button element."},{key:"icon",value:{name:"JSX.Element",required:!1},description:"(Optional) icon to render inside the button element."},{key:"label",value:{name:"string",required:!0},description:"Button label."},{key:"onClick",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!0},description:"Callback fired when the button is clicked."}]}}],raw:"Array<Action>"},description:"Custom actions to render as buttons."},classNames:{required:!1,flowType:{name:"signature",type:"object",raw:`{
  button: string,
  range: string,
  root: string,
  thumb: string,
  track: string,
  zoom: string
}`,signature:{properties:[{key:"button",value:{name:"string",required:!0}},{key:"range",value:{name:"string",required:!0}},{key:"root",value:{name:"string",required:!0}},{key:"thumb",value:{name:"string",required:!0}},{key:"track",value:{name:"string",required:!0}},{key:"zoom",value:{name:"string",required:!0}}]}},description:"Custom Tailwind CSS class names.",defaultValue:{value:"{}",computed:!1}},max:{required:!1,flowType:{name:"number"},description:"The maximum facet value."},min:{required:!1,flowType:{name:"number"},description:"The minimum facet value."},onValueChange:{required:!0,flowType:{name:"signature",type:"function",raw:"(value: [number, number]) => void",signature:{arguments:[{name:"value",type:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}}],return:{name:"void"}}},description:"Callback fired when the range is changed."},onValueCommit:{required:!1,flowType:{name:"signature",type:"function",raw:"(value: [number, number]) => void",signature:{arguments:[{name:"value",type:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}}],return:{name:"void"}}},description:"Callback fired when the range is done changing."},position:{required:!1,flowType:{name:"union",raw:"'top' | 'bottom' | 'left' | 'right'",elements:[{name:"literal",value:"'top'"},{name:"literal",value:"'bottom'"},{name:"literal",value:"'left'"},{name:"literal",value:"'right'"}]},description:"Position of the value tooltip marker."},step:{required:!1,flowType:{name:"number"},description:"Number of steps to increment the slider.",defaultValue:{value:"1",computed:!1}},value:{required:!1,flowType:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]},description:"Value for controlled input.",defaultValue:{value:"[]",computed:!1}}}};export{P as F};
