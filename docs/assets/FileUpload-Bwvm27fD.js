import{r as l,j as s}from"./iframe-isOIMYbo.js";import{M as o}from"./Message-FpdRftPp.js";import{I as p}from"./Icon-DBxUlxMw.js";import{_ as d}from"./index-default-C0I3bBxV.js";import{i as a}from"./i18n-DkobdbHY.js";import{T as m}from"./Trans-FXWN6mRC.js";class u extends l.Component{fileInput;filePattern;constructor(e){super(e),this.state={errors:null},this.fileInput=l.createRef(),this.filePattern=this.props.fileTypes&&new RegExp(`(.*?)\\.${this.props.fileTypes.join("|")}$`)}onClickDropzone(){this.fileInput.current.click()}onDropFiles(e){e.preventDefault();const t=this.toArray(e.dataTransfer.files);this.validate(t).length===t.length&&this.props.onFilesAdded(t)}onFilesAdded(e){e.preventDefault();const t=this.toArray(e.target.files);this.validate(t).length===t.length&&this.props.onFilesAdded(t)}render(){return s.jsxs("div",{className:"file-upload",children:[s.jsx(o,{error:!0,header:a.t("Common.errors.title"),hidden:!(this.state.errors&&this.state.errors.length),visible:this.state.errors&&this.state.errors.length,onDismiss:()=>this.setState({errors:null}),list:this.state.errors}),s.jsxs("div",{className:"file-dropzone",onClick:this.onClickDropzone.bind(this),onDragLeave:e=>{e.preventDefault()},onDragOver:e=>{e.preventDefault()},onDrop:this.onDropFiles.bind(this),onKeyDown:()=>{},role:"button",tabIndex:-1,children:[s.jsx(p,{color:"blue",name:"cloud upload",size:"large"}),s.jsx("div",{className:"file-dropzone-text",children:s.jsxs(m,{i18nKey:"FileUpload.add",children:[s.jsx("span",{className:"link-text",children:"Add files"}),"Â or drop files here"]})}),s.jsx("input",{ref:this.fileInput,className:"file-input",type:"file",multiple:!0,onChange:this.onFilesAdded.bind(this)})]})]})}toArray(e){const t=[];for(let r=0;r<e.length;r+=1)t.push(e.item(r));return t}validate(e){if(!this.props.maxSize&&!this.props.fileTypes)return e;const t=[],r=[];return d.each(e,i=>{let n=!0;this.props.maxSize&&i.size>this.props.maxSize&&(n=!1,r.push(a.t("FileUpload.errors.maxSize",{name:i.name}))),this.filePattern&&!i.name.match(this.filePattern)&&(n=!1,r.push(a.t("FileUpload.errors.fileType",{name:i.name,type:/[^.]+$/.exec(i.name)}))),n&&t.push(i)}),this.setState({errors:r}),t}}u.__docgenInfo={description:`The <code>FileUpload</code> component renders a dropzone and allows a user to drop or select one or more files
from their local file system. Optionally, the files can be limited by size or type.`,methods:[{name:"onClickDropzone",docblock:"Triggers the file input click.",modifiers:[],params:[],returns:null,description:"Triggers the file input click."},{name:"onDropFiles",docblock:`Adds the selected files.

@param e`,modifiers:[],params:[{name:"e",optional:!1,type:{name:"signature",type:"object",raw:`{
  dataTransfer: HTMLInputElement,
  preventDefault: () => void,
  target: HTMLInputElement
}`,signature:{properties:[{key:"dataTransfer",value:{name:"HTMLInputElement",required:!0}},{key:"preventDefault",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!0}},{key:"target",value:{name:"HTMLInputElement",required:!0}}]},alias:"FileEvent"}}],returns:null,description:"Adds the selected files."},{name:"onFilesAdded",docblock:`Adds the selected files.

@param e`,modifiers:[],params:[{name:"e",optional:!1,type:{name:"signature",type:"object",raw:`{
  dataTransfer: HTMLInputElement,
  preventDefault: () => void,
  target: HTMLInputElement
}`,signature:{properties:[{key:"dataTransfer",value:{name:"HTMLInputElement",required:!0}},{key:"preventDefault",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!0}},{key:"target",value:{name:"HTMLInputElement",required:!0}}]},alias:"FileEvent"}}],returns:null,description:"Adds the selected files."},{name:"toArray",docblock:`Converts the passed file list to an array.

@param fileList

@returns {[]}`,modifiers:[],params:[{name:"fileList",optional:!1,type:{name:"any"}}],returns:{type:{name:"tuple",elements:[]}},description:"Converts the passed file list to an array."},{name:"validate",docblock:`Validates the passed list of files.

@param files

@returns {[]|*}`,modifiers:[],params:[{name:"files",optional:!1,type:{name:"Array",elements:[{name:"File"}],raw:"Array<File>",alias:"Array"}}],returns:{type:{name:"union",elements:[{name:"tuple",elements:[]},{name:"mixed"}]}},description:"Validates the passed list of files."}],displayName:"FileUpload",props:{fileTypes:{required:!1,flowType:{name:"Array",elements:[{name:"string"}],raw:"Array<string>"},description:"A list of file types to include"},maxSize:{required:!1,flowType:{name:"number"},description:"The maximum size for a single file"},onFilesAdded:{required:!0,flowType:{name:"signature",type:"function",raw:"(files: Array<File>) => void",signature:{arguments:[{name:"files",type:{name:"Array",elements:[{name:"File"}],raw:"Array<File>"}}],return:{name:"void"}}},description:"Call back for when files are added"}}};export{u as F};
