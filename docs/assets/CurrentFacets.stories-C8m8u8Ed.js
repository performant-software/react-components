import{j as t}from"./jsx-runtime-BTCK_S7S.js";import{a as l}from"./chunk-WFFRPTHA-B2vgThZf.js";import{d as _}from"./index-BC-Y1H_2.js";import{r as c}from"./index-CBqU2yxZ.js";import{_ as n}from"./index-default-C_maRo4o.js";import{C as j}from"./CurrentFacetLabels-CMZ1g7IV.js";import{C as I}from"./CurrentFacetsModal-CEHZVxAS.js";import"./preview-errors-CzpZmerH.js";import"./index-CKJfshIT.js";import"./v4-D8aEg3BZ.js";import"./mapValues-BntjSFt6.js";import"./_commonjsHelpers-BosuxZz1.js";import"./pickBy-CC7CsC_n.js";import"./_commonjs-dynamic-modules-TDtrdbi3.js";import"./isPlainObject-D9-U-Vjl.js";import"./index-Cw1G72V2.js";import"./tiny-invariant.cjs-DxxScMW_.js";import"./___vite-browser-external_commonjs-proxy-DRaEfepn.js";import"./debounce-BANtZgGn.js";import"./Button-Blq7Z6RX.js";import"./extends-CCbyfPlC.js";import"./inheritsLoose-1HkgTRWY.js";import"./setPrototypeOf-DgZC2w_0.js";import"./getElementType-CckcRzoH.js";import"./Icon-2tEtgK8g.js";import"./Label-Cq1fb1cd.js";import"./ModernAutoControlledComponent-DJBWk5EW.js";import"./assertThisInitialized-B9jnkVVz.js";import"./includes-CQoJOerW.js";import"./toFinite-KQ8KevIC.js";import"./forEach-CXlln0XP.js";import"./Dimmer-D_gwaesu.js";import"./Portal-DvhHJPzU.js";import"./keyboardKey-OMDgGVm3.js";import"./index-DZGZymok.js";import"./objectWithoutPropertiesLoose-1QL-frMM.js";import"./map-B4PnIEPz.js";import"./Modal-Bz2VEyQG.js";import"./index-BBpNyw-T.js";import"./_baseSet-6y0qliU9.js";import"./_baseAssignValue-izmKBXUH.js";import"./_arrayReduce-CrxnWFSq.js";import"./isEmpty-Cyb9hIKi.js";import"./i18n-DOVQ27W-.js";import"./i18next-Sc0HEOoc.js";import"./toPropertyKey-hKuLU48H.js";import"./defineProperty-CCxoMnQV.js";import"./inherits-D5wXBZoG.js";import"./createClass-D2z1h_eG.js";import"./getPrototypeOf-BYVhAdwF.js";const u=({useCurrentRefinements:m,...a})=>{const[F,d]=c.useState(!1),{items:y}=m(a),r=c.useMemo(()=>n.flatten(n.map(y,s=>n.map(s.refinements,p=>({label:`${s.label}: ${p.label}`,onClick:()=>s.refine(p)})))),[y]),w=c.useMemo(()=>n.filter(r,(s,p)=>!a.limit||p<a.limit),[r,a.limit]);return n.isEmpty(r)?null:t.jsxs(t.Fragment,{children:[t.jsx(j,{count:r.length,items:w,onShowMore:()=>d(!0)}),t.jsx(I,{items:r,open:F,onClose:()=>d(!1)})]})};u.defaultProps={limit:void 0};const f=u;u.__docgenInfo={description:"This component can be used to display the facets/refinements currently applied to an InstantSearch index.",methods:[],displayName:"CurrentFacets",props:{useCurrentRefinements:{required:!0,flowType:{name:"signature",type:"function",raw:"(props: any) => ({ items: Array<any> })",signature:{arguments:[{name:"props",type:{name:"any"}}],return:{name:"signature",type:"object",raw:"{ items: Array<any> }",signature:{properties:[{key:"items",value:{name:"Array",elements:[{name:"any"}],raw:"Array<any>",required:!0}}]}}}},description:"Instant-Search hook to provide current refinements values."},limit:{required:!1,flowType:{name:"number"},description:"The maximum number of facets to display. If more facets are added, they will be accessible via modal.",defaultValue:{value:"undefined",computed:!0}}}};const we={title:"Components/Semantic UI/CurrentFacets",component:f,decorators:[_.withKnobs]},e=m=>({label:m,onClick:l(`click ${m}`)}),i=()=>t.jsx(f,{useCurrentRefinements:()=>({items:[{label:"Color",refine:l("refine"),refinements:[e("Red"),e("Blue"),e("Green")]}]})}),o=()=>t.jsx(f,{limit:3,useCurrentRefinements:()=>({items:[{label:"Color",refine:l("refine"),refinements:[e("Red"),e("Blue"),e("Green"),e("Purple"),e("Orange"),e("Yellow")]}]})});i.__docgenInfo={description:"",methods:[],displayName:"Default"};o.__docgenInfo={description:"",methods:[],displayName:"Limit"};var C,R,b;i.parameters={...i.parameters,docs:{...(C=i.parameters)==null?void 0:C.docs,source:{originalSource:`() => <CurrentFacets useCurrentRefinements={() => ({
  items: [{
    label: 'Color',
    refine: action('refine'),
    refinements: [createRefinement('Red'), createRefinement('Blue'), createRefinement('Green')]
  }]
})} />`,...(b=(R=i.parameters)==null?void 0:R.docs)==null?void 0:b.source}}};var h,x,g;o.parameters={...o.parameters,docs:{...(h=o.parameters)==null?void 0:h.docs,source:{originalSource:`() => <CurrentFacets limit={3} useCurrentRefinements={() => ({
  items: [{
    label: 'Color',
    refine: action('refine'),
    refinements: [createRefinement('Red'), createRefinement('Blue'), createRefinement('Green'), createRefinement('Purple'), createRefinement('Orange'), createRefinement('Yellow')]
  }]
})} />`,...(g=(x=o.parameters)==null?void 0:x.docs)==null?void 0:g.source}}};const _e=["Default","Limit"];export{i as Default,o as Limit,_e as __namedExportsOrder,we as default};
