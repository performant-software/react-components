import{j as o}from"./jsx-runtime-D9TvR9R2.js";import"./index.es33-DSnp2hlp.js";import{r as u}from"./index-C0dDX-lL.js";import{H as f}from"./index.es3-B0YKbTj2.js";import{M as r}from"./Message-smmiVK7n.js";import{B as s}from"./Button-CJhT71wt.js";import{L as a}from"./Loader-lqR_Ikjg.js";import{D as h}from"./Dimmer-DP3fvqlo.js";import{M as g}from"./Modal-BWgkEMr1.js";import{T as d}from"./Toaster-gMCa2mDU.js";import{i as t}from"./i18n-C9xJ7SCg.js";const n=f(e=>{const m=e.component,[l,i]=u.useState(!1),c=!!(e.errors&&e.errors.length);return o.jsxs(m,{...e,children:[e.showLoading&&e.loading&&o.jsx(h,{active:e.loading,inverted:!0,children:o.jsx(a,{content:t.t("Common.messages.loading")})}),l&&c&&o.jsxs(d,{onDismiss:()=>i(!1),timeout:0,type:d.MessageTypes.negative,children:[o.jsx(r.Header,{content:t.t("Common.messages.error.header")}),o.jsx(r.List,{items:e.errors})]}),o.jsxs(g.Actions,{className:"edit-modal-actions",children:[o.jsxs(s,{disabled:e.saving,onClick:()=>(i(!0),e.onSave()),primary:!0,size:"medium",type:"submit",children:[t.t("Common.buttons.save"),e.saving&&o.jsx(a,{active:!0,className:"saving",inline:!0,size:"tiny"})]}),o.jsx(s,{basic:!0,disabled:e.saving,onClick:e.onClose.bind(void 0),size:"medium",type:"button",children:t.t("Common.buttons.cancel")})]})]})});n.defaultProps={showLoading:!0};const k=n;n.__docgenInfo={description:`The <code>EditModal</code> component can be used to edit the details of a single record within a modal view. This
component uses the <code>EditContainer</code> higher-order component to facilitate all of the editing functionality.
This component is responsible for rendering the container in which the editable form is rendered.`,methods:[],displayName:"EditModal",props:{component:{required:!0,flowType:{name:"ComponentType",elements:[{name:"any"}],raw:"ComponentType<any>"},description:"The form component to render."},onClose:{required:!0,flowType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback fired when the close button is clicked."},onSave:{required:!0,flowType:{name:"signature",type:"function",raw:"() => Promise<any>",signature:{arguments:[],return:{name:"Promise",elements:[{name:"any"}],raw:"Promise<any>"}}},description:"Callback fired when the save button is clicked."},showLoading:{required:!1,flowType:{name:"boolean"},description:"If <code>true</code>, a loading indicator will display.",defaultValue:{value:"true",computed:!1}}}};export{k as E};
