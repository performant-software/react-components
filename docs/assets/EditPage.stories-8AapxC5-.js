import{r as S,j as e}from"./iframe-vd5jUnmh.js";import{F as o}from"./Form-Db_2OMnV.js";import{_ as j}from"./index-default-B8-H6N8J.js";import{A as I}from"./AddModal-Bs3K2deS.js";import{A as k}from"./Api-DGMTLhRm.js";import{A as w}from"./AssociatedDropdown-CjgFVvt4.js";import"./index.es28-C-vUsR_k.js";import{L as E}from"./index.es3-PEJkx8t7.js";import{M as u}from"./Menu-B4TGYLsP.js";import{M as b}from"./Message-DU3z-sYC.js";import{L as P}from"./Loader-B5cf53Bl.js";import{D as v}from"./Dimmer-Fz-z8WIU.js";import{_ as t}from"./index-default-C0I3bBxV.js";import{C as x}from"./CancelButton-CuXWZyww.js";import{S as y}from"./SaveButton-BJyrg9h1.js";import{T as C}from"./Toaster-CZ2ZghS_.js";import{i as T}from"./i18n-DkobdbHY.js";import{i as _}from"./Companies-Dq8qL_4h.js";import"./extends-CCbyfPlC.js";import"./inheritsLoose-1HkgTRWY.js";import"./setPrototypeOf-DgZC2w_0.js";import"./getElementType-Dbrg5pYk.js";import"./Button-BDHbVLWx.js";import"./Icon-DvprR8oi.js";import"./Label-D1PIeSX5.js";import"./ModernAutoControlledComponent-QVsiK7km.js";import"./assertThisInitialized-B9jnkVVz.js";import"./includes-eGroWB-Q.js";import"./toFinite-CzVf2XkS.js";import"./forEach-CbH1wg7D.js";import"./map-uhZzoJ4W.js";import"./Portal-C6ILt24N.js";import"./keyboardKey-DeBoM4Ub.js";import"./Checkbox-mMJwNdkd.js";import"./_baseSet-BdlGglPz.js";import"./_baseAssignValue-Bri4X6-V.js";import"./Dropdown-C6akRp4P.js";import"./without-lQrFBxoL.js";import"./isArrayLikeObject-B5eiN9N1.js";import"./isEmpty-9Dhr09Zy.js";import"./deburr-CTkioK7w.js";import"./index-DY9fuINF.js";import"./_arrayReduce-CrxnWFSq.js";import"./filter-0P9hSMEf.js";import"./Input-CulkMBuo.js";import"./Modal-C6FWzHHP.js";import"./index-BP6glIEM.js";import"./index.es35-NGGuPWEW.js";import"./EditModal--flqTX42.js";import"./index.es33-DtjEY4Ke.js";import"./Transition-CRc2xu3K.js";import"./i18next-eNuDfwAU.js";class g extends S.Component{static defaultProps;constructor(r){super(r),this.state={currentTab:"",showToaster:!1}}componentDidMount(){if(this.props.menu){const r=t.first(this.props.menu.items);this.setState({currentTab:r&&r.key})}}componentDidUpdate(r){!t.isEmpty(this.props.errors)&&!t.isEmpty(r.errors)&&r.errors!==this.props.errors&&this.setState({showToaster:!0})}onSave(){return this.setState({showToaster:!0}),this.props.onSave()}render(){return e.jsxs(v.Dimmable,{as:"div",className:`edit-page ${this.props.className||""}`,children:[this.renderLoading(),e.jsxs(o,{noValidate:!0,children:[this.renderMenu(),this.renderButtons(),this.renderComponent(),this.renderToaster()]})]})}renderButtons(){return this.props.menu?null:e.jsxs("div",{className:"button-container",children:[e.jsx(y,{onClick:this.onSave.bind(this),saving:this.props.saving}),e.jsx(x,{disabled:this.props.saving,onClick:this.props.onClose.bind(this)})]})}renderComponent(){const r=this.props.component;return e.jsx(r,{...this.props,currentTab:this.state.currentTab})}renderLoading(){return this.props.showLoading&&this.props.loading?e.jsx(v,{active:this.props.loading,inverted:!0,children:e.jsx(P,{content:T.t("Common.messages.loading")})}):null}renderMenu(){return this.props.menu?e.jsxs(u,{...t.omit(this.props.menu,"items"),children:[this.props.menu&&t.map(this.props.menu.items,r=>e.jsx(u.Item,{active:r.key===this.state.currentTab,name:r.name,onClick:()=>this.setState({currentTab:r.key})},r.key)),e.jsx(u.Menu,{position:"right",children:e.jsxs(u.Item,{children:[e.jsx(y,{onClick:this.onSave.bind(this),saving:this.props.saving}),e.jsx(x,{disabled:this.props.saving,onClick:this.props.onClose.bind(this)})]})})]}):null}renderToaster(){return!this.state.showToaster||!(this.props.errors&&this.props.errors.length)?null:e.jsxs(C,{onDismiss:()=>this.setState({showToaster:!1}),timeout:0,type:C.MessageTypes.negative,children:[e.jsx(b.Header,{content:T.t("Common.messages.error.header")}),e.jsx(b.List,{items:this.props.errors})]})}}g.defaultProps={showLoading:!0};const s=E(g);g.__docgenInfo={description:`The <code>EditPage</code> component can be used to edit the details of a single record within a page view. This
component uses the <code>EditContainer</code> higher-order component to facilitate all of the editing functionality.
This component is responsible for rendering the container in which the editable form is rendered.`,methods:[{name:"onSave",docblock:`Shows the toaster and calls the onSave prop.

@returns {*}`,modifiers:[],params:[],returns:{type:{name:"mixed"}},description:"Shows the toaster and calls the onSave prop."},{name:"renderButtons",docblock:`Renders the buttons and container if no menu is present.

@returns {null|*}`,modifiers:[],params:[],returns:{type:{name:"union",elements:[{name:"mixed"}]}},description:"Renders the buttons and container if no menu is present."},{name:"renderComponent",docblock:`Renders the wrapped component.

@returns {*}`,modifiers:[],params:[],returns:{type:{name:"mixed"}},description:"Renders the wrapped component."},{name:"renderLoading",docblock:`Renders the loading indicator.

@returns {null|*}`,modifiers:[],params:[],returns:{type:{name:"union",elements:[{name:"mixed"}]}},description:"Renders the loading indicator."},{name:"renderMenu",docblock:`Renders the menu (if present).

@returns {null|*}`,modifiers:[],params:[],returns:{type:{name:"union",elements:[{name:"mixed"}]}},description:"Renders the menu (if present)."},{name:"renderToaster",docblock:`Renders the toaster component.

@returns {null|*}`,modifiers:[],params:[],returns:{type:{name:"union",elements:[{name:"mixed"}]}},description:"Renders the toaster component."}],displayName:"EditPageClass",props:{className:{required:!1,flowType:{name:"string"},description:"CSS class name to append to the container <code>div</code> element."},component:{required:!0,flowType:{name:"ComponentType",elements:[{name:"any"}],raw:"ComponentType<any>"},description:"The form component to render."},menu:{required:!1,flowType:{name:"MenuProps"},description:"If provided, the passed menu will render as tabs at the top of the page."},onClose:{required:!0,flowType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback fired when the close button is clicked."},onSave:{required:!0,flowType:{name:"signature",type:"function",raw:"() => Promise<any>",signature:{arguments:[],return:{name:"Promise",elements:[{name:"any"}],raw:"Promise<any>"}}},description:"Callback fired when the save button is clicked."},showLoading:{required:!1,flowType:{name:"boolean"},description:"If <code>true</code>, a loading indicator will display.",defaultValue:{value:"true",computed:!1}}}};const{action:h}=__STORYBOOK_MODULE_ACTIONS__,_e={title:"Components/Semantic UI/EditPage",component:s},c=h("close"),l=()=>(h("save")(),Promise.resolve()),f=()=>e.jsxs("div",{children:[e.jsx(o.Input,{"aria-label":"Name",label:"Name"}),e.jsx(o.Input,{"aria-label":"Address",label:"Address"}),e.jsx(o.Input,{"aria-label":"Phone",label:"Phone"})]}),i=()=>e.jsx(s,{component:f,onClose:c,onSave:l}),a=()=>e.jsx(s,{component:f,item:{id:1},onClose:c,onInitialize:()=>new Promise(n=>{j.delay(n.bind(void 0,{id:1}),5e3)}),onSave:l}),d=()=>e.jsx(s,{component:f,menu:{items:[{name:"Details",key:"details"},{name:"Technical",key:"technical"},{name:"Other",key:"other"}]},onClose:c,onSave:l}),m=()=>e.jsx(s,{component:n=>e.jsxs(e.Fragment,{children:[e.jsx(o.Input,{id:"name",required:n.isRequired("name"),error:n.isError("name"),label:"Name",onChange:n.onTextInputChange.bind(void 0,"name")}),e.jsx(o.Input,{id:"address",required:n.isRequired("address"),error:n.isError("address"),label:"Address",onChange:n.onTextInputChange.bind(void 0,"address")}),e.jsx(o.Input,{id:"phone",required:n.isRequired("phone"),error:n.isError("phone"),onChange:n.onTextInputChange.bind(void 0,"phone"),label:"Phone"})]}),onClose:c,onSave:l,required:["name","address","phone"]}),q=()=>e.jsxs("div",{children:[e.jsx(o.Input,{id:"name",label:"Name"}),e.jsx(o.Input,{id:"address",label:"Address"}),e.jsx(o.Input,{id:"phone",label:"Phone"}),e.jsx(o.Input,{label:"Field",required:!0,children:e.jsx(w,{collectionName:"items",modal:{component:I,onSave:()=>(h("save")(),Promise.resolve({}))},onSearch:n=>k.onLoad({items:_,search:n}),onSelection:h("selection"),renderOption:n=>({key:n.id,value:n.id,text:n.company,description:n.country})})})]}),p=()=>e.jsx(s,{component:q,menu:{items:[{name:"Details",key:"details"},{name:"Technical",key:"technical"},{name:"Other",key:"other"}]},onClose:c,onSave:l});i.__docgenInfo={description:"",methods:[],displayName:"Default"};a.__docgenInfo={description:"",methods:[],displayName:"Loading"};d.__docgenInfo={description:"",methods:[],displayName:"Menu"};m.__docgenInfo={description:"",methods:[],displayName:"SaveError"};p.__docgenInfo={description:"",methods:[],displayName:"Toaster"};i.parameters={...i.parameters,docs:{...i.parameters?.docs,source:{originalSource:"() => <EditPage component={TestForm} onClose={onClose} onSave={onSave} />",...i.parameters?.docs?.source}}};a.parameters={...a.parameters,docs:{...a.parameters?.docs,source:{originalSource:`() => <EditPage component={TestForm} item={{
  id: 1
}} onClose={onClose} onInitialize={() => new Promise(resolve => {
  _.delay(resolve.bind(this, {
    id: 1
  }), 5000);
})} onSave={onSave} />`,...a.parameters?.docs?.source}}};d.parameters={...d.parameters,docs:{...d.parameters?.docs,source:{originalSource:`() => <EditPage component={TestForm} menu={{
  items: [{
    name: 'Details',
    key: 'details'
  }, {
    name: 'Technical',
    key: 'technical'
  }, {
    name: 'Other',
    key: 'other'
  }]
}} onClose={onClose} onSave={onSave} />`,...d.parameters?.docs?.source}}};m.parameters={...m.parameters,docs:{...m.parameters?.docs,source:{originalSource:`() => <EditPage component={(props: EditContainerProps) => <>
        <Form.Input id='name' required={props.isRequired('name')} error={props.isError('name')} label='Name' onChange={props.onTextInputChange.bind(this, 'name')} />
        <Form.Input id='address' required={props.isRequired('address')} error={props.isError('address')} label='Address' onChange={props.onTextInputChange.bind(this, 'address')} />
        <Form.Input id='phone' required={props.isRequired('phone')} error={props.isError('phone')} onChange={props.onTextInputChange.bind(this, 'phone')} label='Phone' />
      </>} onClose={onClose} onSave={onSave} required={['name', 'address', 'phone']} />`,...m.parameters?.docs?.source}}};p.parameters={...p.parameters,docs:{...p.parameters?.docs,source:{originalSource:`() => <EditPage component={ToasterForm} menu={{
  items: [{
    name: 'Details',
    key: 'details'
  }, {
    name: 'Technical',
    key: 'technical'
  }, {
    name: 'Other',
    key: 'other'
  }]
}} onClose={onClose} onSave={onSave} />`,...p.parameters?.docs?.source}}};const qe=["Default","Loading","Menu","SaveError","Toaster"];export{i as Default,a as Loading,d as Menu,m as SaveError,p as Toaster,qe as __namedExportsOrder,_e as default};
