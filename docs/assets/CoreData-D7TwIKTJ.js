import{r as a}from"./index-C0dDX-lL.js";const g=a.createContext({baseUrl:void 0,projectIds:void 0}),P=(n,e,s,t,r={})=>{const h=`${n}/core_data/public/v1/${e}/${s}/${t}`,i=new URLSearchParams(r);return`${h}?${i}`},S=(n,e,s,t={})=>{const r=`${n}/core_data/public/v1/${e}/${s}`,h=new URLSearchParams(t);return`${r}?${h}`},c={buildNestedUrl:P,buildUrl:S};class d{constructor(e,s){if(this.constructor===d)throw new TypeError('Abstract class "BaseService" cannot be instantiated directly.');this.baseUrl=e,this.projectIds=s}fetchOne(e,s={}){const t=c.buildUrl(this.baseUrl,this.getRoute(),e,this.getSearchParams(s));return fetch(t).then(r=>r.json())}fetchRelatedEvents(e,s={}){const t=c.buildNestedUrl(this.baseUrl,this.getRoute(),e,"events",this.getSearchParams(s));return fetch(t).then(r=>r.json())}fetchRelatedInstances(e,s={}){const t=c.buildNestedUrl(this.baseUrl,this.getRoute(),e,"instances",this.getSearchParams(s));return fetch(t).then(r=>r.json())}fetchRelatedItems(e,s={}){const t=c.buildNestedUrl(this.baseUrl,this.getRoute(),e,"items",this.getSearchParams(s));return fetch(t).then(r=>r.json())}fetchRelatedManifests(e,s={}){const t=c.buildNestedUrl(this.baseUrl,this.getRoute(),e,"manifests",this.getSearchParams(s));return fetch(t).then(r=>r.json())}fetchRelatedMedia(e,s={}){const t=c.buildNestedUrl(this.baseUrl,this.getRoute(),e,"media_contents",this.getSearchParams(s));return fetch(t).then(r=>r.json())}fetchRelatedOrganizations(e,s={}){const t=c.buildNestedUrl(this.baseUrl,this.getRoute(),e,"organizations",this.getSearchParams(s));return fetch(t).then(r=>r.json())}fetchRelatedPeople(e,s={}){const t=c.buildNestedUrl(this.baseUrl,this.getRoute(),e,"people",this.getSearchParams(s));return fetch(t).then(r=>r.json())}fetchRelatedPlaces(e,s={}){const t=c.buildNestedUrl(this.baseUrl,this.getRoute(),e,"places",this.getSearchParams(s));return fetch(t).then(r=>r.json())}fetchRelatedTaxonomies(e,s={}){const t=c.buildNestedUrl(this.baseUrl,this.getRoute(),e,"taxonomies",this.getSearchParams(s));return fetch(t).then(r=>r.json())}fetchRelatedWorks(e,s={}){const t=c.buildNestedUrl(this.baseUrl,this.getRoute(),e,"works",this.getSearchParams(s));return fetch(t).then(r=>r.json())}getRoute(){}getSearchParams(e){return{project_ids:this.projectIds,...e}}}class j extends d{getRoute(){return"events"}}class v extends d{getRoute(){return"places"}}const N=1,$=(n,e={},s=[])=>{const[t,r]=a.useState(),[h,i]=a.useState(!1),[o,b]=a.useState(N),u=a.useMemo(()=>(t==null?void 0:t.list)||{},[t]),f=a.useMemo(()=>o===u.pages,[o,u.pages]),U=a.useMemo(()=>o===1,[o]),m=a.useCallback(()=>b(l=>l+1),[]),R=a.useCallback(l=>b(l),[]),p=a.useCallback(()=>b(l=>l-1),[]);return a.useEffect(()=>{i(!0),n({...e,page:o}).then(l=>r(l)).finally(()=>i(!1))},[...s,o]),{count:u.count,data:t,isNextDisabled:f,isPreviousDisabled:U,loading:h,onNext:m,onPageChange:R,onPrevious:p,page:o,pages:u.pages}},C=()=>{const{baseUrl:n,projectIds:e}=a.useContext(g);return new j(n,e)},E=()=>{const{baseUrl:n,projectIds:e}=a.useContext(g);return new v(n,e)};export{g as C,C as a,$ as b,E as u};
