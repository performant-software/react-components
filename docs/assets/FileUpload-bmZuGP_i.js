var u=Object.defineProperty;var f=(n,s,e)=>s in n?u(n,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[s]=e;var o=(n,s,e)=>(f(n,typeof s!="symbol"?s+"":s,e),e);import{j as i}from"./jsx-runtime-D9TvR9R2.js";import{r as d}from"./index-C0dDX-lL.js";import{M as c}from"./Message-smmiVK7n.js";import{I as h}from"./Icon-C_3d7-zE.js";import{_ as y}from"./index-default-C_maRo4o.js";import{i as p}from"./i18n-axRemAo9.js";import{T as v}from"./Trans-B7Cte6nZ.js";class m extends d.Component{constructor(e){super(e);o(this,"fileInput");o(this,"filePattern");this.state={errors:null},this.fileInput=d.createRef(),this.filePattern=this.props.fileTypes&&new RegExp(`(.*?)\\.${this.props.fileTypes.join("|")}$`)}onClickDropzone(){this.fileInput.current.click()}onDropFiles(e){e.preventDefault();const t=this.toArray(e.dataTransfer.files);this.validate(t).length===t.length&&this.props.onFilesAdded(t)}onFilesAdded(e){e.preventDefault();const t=this.toArray(e.target.files);this.validate(t).length===t.length&&this.props.onFilesAdded(t)}render(){return i.jsxs("div",{className:"file-upload",children:[i.jsx(c,{error:!0,header:p.t("Common.errors.title"),hidden:!(this.state.errors&&this.state.errors.length),visible:this.state.errors&&this.state.errors.length,onDismiss:()=>this.setState({errors:null}),list:this.state.errors}),i.jsxs("div",{className:"file-dropzone",onClick:this.onClickDropzone.bind(this),onDragLeave:e=>{e.preventDefault()},onDragOver:e=>{e.preventDefault()},onDrop:this.onDropFiles.bind(this),onKeyDown:()=>{},role:"button",tabIndex:-1,children:[i.jsx(h,{color:"blue",name:"cloud upload",size:"large"}),i.jsx("div",{className:"file-dropzone-text",children:i.jsxs(v,{i18nKey:"FileUpload.add",children:[i.jsx("span",{className:"link-text",children:"Add files"}),"Â or drop files here"]})}),i.jsx("input",{ref:this.fileInput,className:"file-input",type:"file",multiple:!0,onChange:this.onFilesAdded.bind(this)})]})]})}toArray(e){const t=[];for(let r=0;r<e.length;r+=1)t.push(e.item(r));return t}validate(e){if(!this.props.maxSize&&!this.props.fileTypes)return e;const t=[],r=[];return y.each(e,a=>{let l=!0;this.props.maxSize&&a.size>this.props.maxSize&&(l=!1,r.push(p.t("FileUpload.errors.maxSize",{name:a.name}))),this.filePattern&&!a.name.match(this.filePattern)&&(l=!1,r.push(p.t("FileUpload.errors.fileType",{name:a.name,type:/[^.]+$/.exec(a.name)}))),l&&t.push(a)}),this.setState({errors:r}),t}}const I=m;m.__docgenInfo={description:`The <code>FileUpload</code> component renders a dropzone and allows a user to drop or select one or more files
from their local file system. Optionally, the files can be limited by size or type.`,methods:[{name:"onClickDropzone",docblock:"Triggers the file input click.",modifiers:[],params:[],returns:null,description:"Triggers the file input click."},{name:"onDropFiles",docblock:`Adds the selected files.

@param e`,modifiers:[],params:[{name:"e",optional:!1,type:{name:"signature",type:"object",raw:`{
  dataTransfer: HTMLInputElement,
  preventDefault: () => void,
  target: HTMLInputElement
}`,signature:{properties:[{key:"dataTransfer",value:{name:"HTMLInputElement",required:!0}},{key:"preventDefault",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!0}},{key:"target",value:{name:"HTMLInputElement",required:!0}}]},alias:"FileEvent"}}],returns:null,description:"Adds the selected files."},{name:"onFilesAdded",docblock:`Adds the selected files.

@param e`,modifiers:[],params:[{name:"e",optional:!1,type:{name:"signature",type:"object",raw:`{
  dataTransfer: HTMLInputElement,
  preventDefault: () => void,
  target: HTMLInputElement
}`,signature:{properties:[{key:"dataTransfer",value:{name:"HTMLInputElement",required:!0}},{key:"preventDefault",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!0}},{key:"target",value:{name:"HTMLInputElement",required:!0}}]},alias:"FileEvent"}}],returns:null,description:"Adds the selected files."},{name:"toArray",docblock:`Converts the passed file list to an array.

@param fileList

@returns {[]}`,modifiers:[],params:[{name:"fileList",optional:!1,type:{name:"any"}}],returns:{type:{name:"tuple",elements:[]}},description:"Converts the passed file list to an array."},{name:"validate",docblock:`Validates the passed list of files.

@param files

@returns {[]|*}`,modifiers:[],params:[{name:"files",optional:!1,type:{name:"Array",elements:[{name:"File"}],raw:"Array<File>",alias:"Array"}}],returns:{type:{name:"union",elements:[{name:"tuple",elements:[]},{name:"mixed"}]}},description:"Validates the passed list of files."}],displayName:"FileUpload",props:{fileTypes:{required:!1,flowType:{name:"Array",elements:[{name:"string"}],raw:"Array<string>"},description:"A list of file types to include"},maxSize:{required:!1,flowType:{name:"number"},description:"The maximum size for a single file"},onFilesAdded:{required:!0,flowType:{name:"signature",type:"function",raw:"(files: Array<File>) => void",signature:{arguments:[{name:"files",type:{name:"Array",elements:[{name:"File"}],raw:"Array<File>"}}],return:{name:"void"}}},description:"Call back for when files are added"}}};export{I as F};
