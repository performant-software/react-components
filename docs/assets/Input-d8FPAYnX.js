import{j as n}from"./jsx-runtime-D9TvR9R2.js";import{c as i}from"./clsx-B-dksMZM.js";import"./index-C0dDX-lL.js";import{I as a}from"./Icon-CLXecEt2.js";import{i as o}from"./i18n-DBs6I0Fj.js";const r=e=>{const l=e.value&&(typeof e.clearable>"u"||e.clearable);return n.jsxs("div",{className:i("flex","gap-4","items-center","justify-center","w-full","border","border-neutral-200","py-3","px-4","h-[40px]","rounded-[50px]","text-md","fill-neutral-800","focus-within:border-primary",e.className),children:[e.icon&&n.jsx(a,{name:e.icon,size:16}),n.jsx("input",{"aria-label":e.ariaLabel,className:"grow bg-transparent focus:outline-none w-full",placeholder:e.placeholder,onBlur:t=>e.onBlur(t.target.value),onChange:t=>e.onChange(t.target.value),type:"text",value:typeof e.value>"u"?"":e.value}),l&&n.jsx("button",{"aria-label":o.t("Input.clear"),className:"p-2 rounded-full flex items-center justify-center relative left-2",onClick:()=>e.onChange(""),type:"button",children:n.jsx(a,{name:"close",size:16})})]})},f=r;r.__docgenInfo={description:"",methods:[],displayName:"Input",props:{ariaLabel:{required:!1,flowType:{name:"string"},description:"(Optional) aria-label attribute for the input if not already contained in a label element"},className:{required:!1,flowType:{name:"string"},description:"(Optional) Extra styles for the input"},clearable:{required:!1,flowType:{name:"boolean"},description:`(Optional) Whether the user should be able to clear the input.
This causes an X button to appear on the righthand side of the input.`},placeholder:{required:!1,flowType:{name:"string"},description:"(Optional) Placeholder text to show when the user hasn't typed anything."},onBlur:{required:!0,flowType:{name:"signature",type:"function",raw:"(value: string) => any",signature:{arguments:[{name:"value",type:{name:"string"}}],return:{name:"any"}}},description:`Callback function telling the component what to do when the user changes the value.
@param {string} value
@returns`},onChange:{required:!0,flowType:{name:"signature",type:"function",raw:"(value: string) => any",signature:{arguments:[{name:"value",type:{name:"string"}}],return:{name:"any"}}},description:`Callback function telling the component what to do when the user changes the value.
@param {string} value
@returns`},icon:{required:!1,flowType:{name:"string"},description:"(Optional) The name of the icon to show on the left side of the component."},value:{required:!0,flowType:{name:"string"},description:"The value of the field. If undefined, it will start as ''."}}};export{f as I};
