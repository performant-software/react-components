var w=Object.defineProperty;var b=(o,e,t)=>e in o?w(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var u=(o,e,t)=>(b(o,typeof e!="symbol"?e+"":e,t),t);import{j as n}from"./jsx-runtime-D9TvR9R2.js";import{r as f}from"./index-C0dDX-lL.js";import{B as p}from"./Button-CJhT71wt.js";import{H as v}from"./Header-BHdMo175.js";import{I as k}from"./Icon-C_3d7-zE.js";import{S as C}from"./Segment-BqjJDZFO.js";import{C as x}from"./Checkbox-B3tsCUtI.js";import{C as l}from"./Card-ClzD5NPk.js";import{I as d}from"./Item-DsGqipCH.js";import{_ as i}from"./index-default-C_maRo4o.js";import{i as h}from"./i18n-CM1tepcX.js";import{u as q}from"./List-s-Pf6HzD.js";import{D as T}from"./Dropdown-DwNow7wJ.js";import{S as E}from"./DataList-BadelphY.js";import{D as y}from"./Draggable-DKUpfzgU.js";const m={list:0,grid:1},I=o=>{var e;return e=class extends f.Component{constructor(r){super(r);u(this,"sortDropdown");this.state={view:r.defaultView||m.list}}getSortValue(){const r=i.find(this.props.sort,{value:this.props.sortColumn});return r&&r.text}isHidden(){return this.props.hideToggle&&i.isEmpty(this.props.sort)&&!this.props.renderListHeader}onSort(r){if(!this.props.onSort)return;let a;r.value!==this.props.sortColumn&&(a=r.direction),this.props.onSort(r.value,a)}render(){return n.jsx(o,{...this.props,renderListHeader:this.renderHeader.bind(this),view:this.state.view})}renderHeader(){return this.isHidden()?null:n.jsxs(n.Fragment,{children:[this.props.renderListHeader&&this.props.renderListHeader(),!this.props.hideToggle&&n.jsxs(n.Fragment,{children:[n.jsx(p,{active:this.state.view===m.list,"aria-label":"List View",basic:this.props.basic,icon:"list",onClick:()=>this.setState({view:m.list})}),n.jsx(p,{active:this.state.view===m.grid,"aria-label":"Grid View",basic:this.props.basic,icon:"grid layout",onClick:()=>this.setState({view:m.grid})})]}),!i.isEmpty(this.props.sort)&&this.props.onSort&&n.jsxs(p.Group,{basic:this.props.basic,color:this.props.sortColor,style:{fontSize:"inherit"},children:[n.jsx(p,{"aria-label":"Sort by",content:this.getSortValue(),icon:this.props.sortDirection===E?"sort alphabet up":"sort alphabet down",onClick:r=>this.sortDropdown.handleClick(r)}),n.jsx(T,{"aria-label":"Sort",className:"button icon",floating:!0,options:i.map(this.props.sort,r=>({...r,onClick:this.onSort.bind(this,r)})),ref:r=>{this.sortDropdown=r},trigger:n.jsx(n.Fragment,{}),value:this.props.sortColumn})]})]})}},u(e,"defaultProps",{basic:!0,hideToggle:!1,sort:[]}),e},S=I;class c extends f.Component{getActions(e){return this.props.actions.filter(t=>!t.accept||t.accept(e)).map(t=>{let r={};return t.name==="edit"?r={basic:!0,label:h.t("ItemList.actions.edit")}:t.name==="copy"?r={basic:!0,label:h.t("ItemList.actions.copy")}:t.name==="delete"&&(r={basic:!0,color:"red",label:h.t("ItemList.actions.delete")}),i.defaults(t,r)})}getClassName(){const e=["item-list"];return this.props.className&&e.push(this.props.className),e.join(" ")}getItemProps(e){return this.props.asProps&&this.props.asProps(e)||{}}isSelectable(){return!!(this.props.selectable&&this.props.isRowSelected&&this.props.onRowSelect)}render(){return n.jsxs("div",{className:this.getClassName(),children:[this.renderList(),this.renderGrid(),this.renderEmptyList(),this.props.children]})}renderCard(e,t){const r=this.getActions(e);let a=n.jsxs(l,{as:this.props.as,link:this.props.link,...this.getItemProps(e),children:[this.props.renderImage&&this.props.renderImage(e),n.jsxs(l.Content,{children:[this.props.renderHeader&&n.jsx(l.Header,{children:this.props.renderHeader(e)}),this.props.renderMeta&&n.jsx(l.Meta,{children:this.props.renderMeta(e)}),this.props.renderDescription&&n.jsx(l.Description,{children:this.props.renderDescription(e)})]}),this.props.renderExtra&&n.jsx(l.Content,{extra:!0,children:this.props.renderExtra(e)}),!i.isEmpty(r)&&n.jsxs(l.Content,{extra:!0,textAlign:"center",children:[i.map(r,(s,g)=>n.jsx(p,{"aria-label":s.name,basic:!0,color:s.resolveColor?s.resolveColor(e):s.color,icon:s.resolveIcon?s.resolveIcon(e):s.icon,onClick:s.onClick.bind(this,e),size:s.size},g)),this.isSelectable()&&n.jsx(p,{"aria-label":"Select",basic:!0,color:this.props.isRowSelected&&this.props.isRowSelected(e)?"green":void 0,icon:"checkmark",onClick:this.props.onRowSelect&&this.props.onRowSelect.bind(this,e)})]})]},e.id||t);return this.props.onDrag&&(a=n.jsx(y,{id:e.id||e.uid,index:t,item:e,onDrag:this.props.onDrag.bind(this),children:a},e.id||e.uid)),a}renderEmptyList(){return this.props.loading||this.props.items&&this.props.items.length?null:this.props.renderEmptyList?this.props.renderEmptyList():n.jsxs(C,{className:"empty-list",padded:"very",textAlign:"center",children:[n.jsx(v,{icon:!0,children:n.jsx(k,{name:"file outline"})}),this.props.renderEmptyMessage()]})}renderGrid(){return this.props.view!==m.grid||!(this.props.items&&this.props.items.length)?null:n.jsx(l.Group,{itemsPerRow:this.props.itemsPerRow,children:i.map(this.props.items,this.renderCard.bind(this))})}renderItem(e,t){let r=n.jsxs(d,{as:this.props.as,...this.getItemProps(e),children:[this.props.renderImage&&n.jsx(d.Image,{children:this.props.renderImage(e)}),n.jsxs(d.Content,{className:"primary-content",children:[this.props.renderHeader&&n.jsx(d.Header,{children:this.props.renderHeader(e)}),this.props.renderMeta&&n.jsx(d.Meta,{children:this.props.renderMeta(e)}),this.props.renderDescription&&n.jsx(d.Description,{children:this.props.renderDescription(e)}),this.props.renderExtra&&n.jsx(d.Extra,{children:this.props.renderExtra(e)}),i.map(this.getActions(e),(a,s)=>n.jsx(p,{basic:a.basic,color:a.resolveColor?a.resolveColor(e):a.color,content:a.resolveName?a.resolveName(e):a.label,icon:a.resolveIcon?a.resolveIcon(e):a.icon,onClick:a.onClick.bind(this,e),size:a.size},s))]}),this.props.renderAdditionalContent&&this.props.renderAdditionalContent(e),this.isSelectable()&&n.jsx("div",{className:"checkbox-container",children:n.jsx(x,{checked:this.props.isRowSelected&&this.props.isRowSelected(e),onChange:this.props.onRowSelect&&this.props.onRowSelect.bind(this,e)})})]},e.id||t);return this.props.onDrag&&(r=n.jsx(y,{id:e.id||e.uid,index:t,item:e,onDrag:this.props.onDrag.bind(this),children:r},e.id||e.uid)),r}renderList(){return this.props.view!==m.list||!(this.props.items&&this.props.items.length)?null:n.jsx(d.Group,{divided:!0,link:this.props.link,relaxed:"very",children:i.map(this.props.items,this.renderItem.bind(this))})}}u(c,"defaultProps");c.defaultProps={actions:[]};const j=S(q(c)),F=j;c.__docgenInfo={description:`The <code>Items</code> component is used as the presentation for a list of records. The component renders
both a <a href="https://react.semantic-ui.com/elements/list/" target="_blank">List</a> and
<a href="https://react.semantic-ui.com/views/card/" target="_blank">Card</a> views.`,methods:[{name:"getActions",docblock:`Returns the list of actions for the passed item.

@param item

@returns {Array<*>}`,modifiers:[],params:[{name:"item",optional:!1}],returns:{type:{name:"Array",elements:[{name:"mixed"}]}},description:"Returns the list of actions for the passed item."},{name:"getClassName",docblock:`Returns a space delimited string of class names.

@returns {string}`,modifiers:[],params:[],returns:{type:{name:"string"}},description:"Returns a space delimited string of class names."},{name:"getItemProps",docblock:`Returns as asProps function value for the passed item, if provided.

@param item

@returns {*|{}}`,modifiers:[],params:[{name:"item",optional:!1}],returns:{type:{name:"union",elements:[{name:"mixed"}]}},description:"Returns as asProps function value for the passed item, if provided."},{name:"isSelectable",docblock:`Returns true if the component has the necessary props to render itself in the "selectable" state.

@returns {boolean}`,modifiers:[],params:[],returns:{type:{name:"boolean"}},description:'Returns true if the component has the necessary props to render itself in the "selectable" state.'},{name:"renderCard",docblock:`Renders the card for the passed item.

@param item
@param index

@returns {*}`,modifiers:[],params:[{name:"item",optional:!1},{name:"index",optional:!1}],returns:{type:{name:"mixed"}},description:"Renders the card for the passed item."},{name:"renderEmptyList",docblock:`Renders the empty list.

@returns {null|*}`,modifiers:[],params:[],returns:{type:{name:"union",elements:[{name:"mixed"}]}},description:"Renders the empty list."},{name:"renderGrid",docblock:`Renders the grid view.

@returns {null|*}`,modifiers:[],params:[],returns:{type:{name:"union",elements:[{name:"mixed"}]}},description:"Renders the grid view."},{name:"renderItem",docblock:`Renders the list item for the passed item.

@param item
@param index

@returns {*}`,modifiers:[],params:[{name:"item",optional:!1},{name:"index",optional:!1}],returns:{type:{name:"mixed"}},description:"Renders the list item for the passed item."},{name:"renderList",docblock:`Renders the list view.

@returns {null|*}`,modifiers:[],params:[],returns:{type:{name:"union",elements:[{name:"mixed"}]}},description:"Renders the list view."}],displayName:"ItemsClass",props:{actions:{required:!1,flowType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  accept: (item: any) => boolean,
  color?: string,
  icon?: string,
  name: string,
  onClick?: (item: any) => void,
  popup: {
    content: string,
    title: string
  },
  render?: (item: any, index: number) => Element<any>,
  title?: string
}`,signature:{properties:[{key:"accept",value:{name:"signature",type:"function",raw:"(item: any) => boolean",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"boolean"}},required:!0}},{key:"color",value:{name:"string",required:!1}},{key:"icon",value:{name:"string",required:!1}},{key:"name",value:{name:"string",required:!0}},{key:"onClick",value:{name:"signature",type:"function",raw:"(item: any) => void",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"void"}},required:!1}},{key:"popup",value:{name:"signature",type:"object",raw:`{
  content: string,
  title: string
}`,signature:{properties:[{key:"content",value:{name:"string",required:!0}},{key:"title",value:{name:"string",required:!0}}]},required:!0}},{key:"render",value:{name:"signature",type:"function",raw:"(item: any, index: number) => Element<any>",signature:{arguments:[{name:"item",type:{name:"any"}},{name:"index",type:{name:"number"}}],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"}},required:!1}},{key:"title",value:{name:"string",required:!1}}]}}],raw:"Array<Action>"},description:`A list of actions to render for each element in the row. Actions with the names "edit" and "delete" will be
handled specially by the <code>List</code> higher-order component.`,defaultValue:{value:"[]",computed:!1}},addButton:{required:!1,flowType:{name:"signature",type:"object",raw:`{
  basic: boolean,
  color: string,
  content?: string,
  inverted?: boolean,
  location: string,
  onClick?: () => void,
  secondary?: boolean
}`,signature:{properties:[{key:"basic",value:{name:"boolean",required:!0}},{key:"color",value:{name:"string",required:!0}},{key:"content",value:{name:"string",required:!1}},{key:"inverted",value:{name:"boolean",required:!1}},{key:"location",value:{name:"string",required:!0}},{key:"onClick",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!1}},{key:"secondary",value:{name:"boolean",required:!1}}]}},description:`If provided, a button will display in the list header allowing the addition of items to the list. When clicked,
the <code>modal</code> prop will be rendered.`},buttons:{required:!1,flowType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  accept?: () => boolean,
  render: (index?: number) => Element<any>
}`,signature:{properties:[{key:"accept",value:{name:"signature",type:"function",raw:"() => boolean",signature:{arguments:[],return:{name:"boolean"}},required:!1}},{key:"render",value:{name:"signature",type:"function",raw:"(index?: number) => Element<any>",signature:{arguments:[{name:"index",type:{name:"number"}}],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"}},required:!0}}]}}],raw:"Array<ListButton>"},description:`A list of arbitrary buttons to the display in the list header. All actions will be handled by the consuming
component.
<br />
<br />

In addition to the props listed here for each button, buttons will also accept any of the Semantic UI
<a href="https://react.semantic-ui.com/elements/button/" target="_blank">Button</a> props.`},count:{required:!1,flowType:{name:"number"},description:"The number of total records in the list (not just the current page)."},className:{required:!1,flowType:{name:"string"},description:"CSS class name to append to the <code>div</code> container."},csvExportButton:{required:!1,flowType:{name:"signature",type:"object",raw:`{
  basic: boolean,
  color: string,
  location: string,
  onClick?: () => void
}`,signature:{properties:[{key:"basic",value:{name:"boolean",required:!0}},{key:"color",value:{name:"string",required:!0}},{key:"location",value:{name:"string",required:!0}},{key:"onClick",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!1}}]}},description:"If provided, a CSV export button will be rendered in the list header."},deleteButton:{required:!1,flowType:{name:"signature",type:"object",raw:`{
  color: string,
  location: string,
  onClick?: () => void
}`,signature:{properties:[{key:"color",value:{name:"string",required:!0}},{key:"location",value:{name:"string",required:!0}},{key:"onClick",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!1}}]}},description:'If provided, a "delete all" button will be rendered in the list header.'},filters:{required:!1,flowType:{name:"signature",type:"object",raw:`{
  active: boolean,
  component: Component<{}>,
  props?: any,
  state?: any,
  onChange: (params: any) => Promise<any>,
  showLabels?: boolean
}`,signature:{properties:[{key:"active",value:{name:"boolean",required:!0}},{key:"component",value:{name:"Component",elements:[{name:"signature",type:"object",raw:"{}",signature:{properties:[]}}],raw:"Component<{}>",required:!0}},{key:"props",value:{name:"any",required:!1}},{key:"state",value:{name:"any",required:!1}},{key:"onChange",value:{name:"signature",type:"function",raw:"(params: any) => Promise<any>",signature:{arguments:[{name:"params",type:{name:"any"}}],return:{name:"Promise",elements:[{name:"any"}],raw:"Promise<any>"}},required:!0}},{key:"showLabels",value:{name:"boolean",required:!1}}]}},description:`If provided, the passed <code>component</code> will be rendered when the filter button is clicked.
<br />
<br />

Values passed in the <code>defaults</code> and <code>props</code> properties will be made available in the
passed component.
<br />
<br />

The <code>onChange</code> callback will fire when the filters are modified. This action will also reload the list,
passing the new filters the <code>onLoad</code> callback.`},modal:{required:!1,flowType:{name:"signature",type:"object",raw:`{
  component: ComponentType<any>,
  props: any,
  state: any
}`,signature:{properties:[{key:"component",value:{name:"ComponentType",elements:[{name:"any"}],raw:"ComponentType<any>",required:!0}},{key:"props",value:{name:"any",required:!0}},{key:"state",value:{name:"any",required:!0}}]}},description:'If provided, the passed modal will be rendered when the "add" button is clicked.'},onCopy:{required:!1,flowType:{name:"signature",type:"function",raw:"(item: any) => any",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"any"}}},description:`If provided, this callback is fired when the "copy" action is clicked for an item. The consuming component
should generate a copy of the selected item and return that value. The return value is then set at the
current item in the edit modal.`},onDelete:{required:!1,flowType:{name:"signature",type:"function",raw:"(item: any) => void",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"void"}}},description:'Callback fired when the "delete" action is clicked for an item.'},onDeleteAll:{required:!1,flowType:{name:"signature",type:"function",raw:"() => Promise<any>",signature:{arguments:[],return:{name:"Promise",elements:[{name:"any"}],raw:"Promise<any>"}}},description:"Callback fired when the delete all button is clicked. This prop expects a Promise as the return value."},onPageChange:{required:!1,flowType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback fired when the page is changed via the pagination component."},onPerPageChange:{required:!1,flowType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback fired when the per page value is changed."},onSave:{required:!1,flowType:{name:"signature",type:"function",raw:"(item: any) => Promise<any>",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"Promise",elements:[{name:"any"}],raw:"Promise<any>"}}},description:`Callback fired when the save button is clicked in the add/edit modal. This function expects a Promise as the
return value.`},page:{required:!1,flowType:{name:"number"},description:"Current page number."},pages:{required:!1,flowType:{name:"number"},description:"Number of pages in the list."},perPage:{required:!1,flowType:{name:"number"},description:"The number of records to display per page."},perPageOptions:{required:!1,flowType:{name:"Array",elements:[{name:"number"}],raw:"Array<number>"},description:"The options to display in the dropdown for the per page selector."},renderDeleteModal:{required:!1,flowType:{name:"signature",type:"function",raw:"({ selectedItem: any, onCancel: () => void, onConfirm: () => void }) => Element<any>",signature:{arguments:[{name:"",type:{name:"signature",type:"object",raw:"{ selectedItem: any, onCancel: () => void, onConfirm: () => void }",signature:{properties:[{key:"selectedItem",value:{name:"any",required:!0}},{key:"onCancel",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!0}},{key:"onConfirm",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!0}}]}}}],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"}}},description:'Custom render function for the modal that appears on the "delete" action.'},renderListHeader:{required:!1,flowType:{name:"signature",type:"function",raw:"() => ?Element<any>",signature:{arguments:[],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>",nullable:!0}}},description:"If provided, this function will return a JSX element that will prepend to the list header."},renderSearch:{required:!1,flowType:{name:"signature",type:"function",raw:"() => Element<any>",signature:{arguments:[],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"}}},description:"If provided, this function will return a JSX element that will replace the default search input."},searchable:{required:!1,flowType:{name:"boolean"},description:"Returns true if the renderSearch prop should be used to render a search input element."},selectable:{required:!1,flowType:{name:"boolean"},description:`If set to <code>true</code>, checkboxes will render as the first table column, allowing each row to be selectable.
The consuming component is responsible for tracking the selected items.`},showRecordCount:{required:!1,flowType:{name:"boolean"},description:"If <code>true</code>, the total number of records will display in the list header."},as:{required:!1,flowType:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"},description:"Renders the Card/Item component as the passed component."},asProps:{required:!1,flowType:{name:"any"},description:"Props to supply to the Card/Item component."},children:{required:!1,flowType:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"},description:"Child elements to append below the list content."},isRowSelected:{required:!1,flowType:{name:"signature",type:"function",raw:"(item: any) => boolean",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"boolean"}}},description:"Callback returning <code>true</code> if the row for the passed item is selected."},items:{required:!0,flowType:{name:"Array",elements:[{name:"any"}],raw:"Array<any>"},description:"An array of objects to render as rows in the list."},itemsPerRow:{required:!1,flowType:{name:"number"},description:"The number of cards to display per row in the grid view."},link:{required:!1,flowType:{name:"boolean"},description:"If true, the list items will be formatted as a link."},onDrag:{required:!1,flowType:{name:"signature",type:"function",raw:"(dragIndex: number, hoverIndex: number) => void",signature:{arguments:[{name:"dragIndex",type:{name:"number"}},{name:"hoverIndex",type:{name:"number"}}],return:{name:"void"}}},description:"Callback fired when a table row is dragged"},onRowSelect:{required:!1,flowType:{name:"signature",type:"function",raw:"(item: any) => void",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"void"}}},description:`Callback fired when the passed item is selected. This callback is <i>only</i> fired if the <code>selectable</code>
prop is passed as <code>true</code>.`},onSelectAllRows:{required:!1,flowType:{name:"signature",type:"function",raw:"(items: Array<any>) => void",signature:{arguments:[{name:"items",type:{name:"Array",elements:[{name:"any"}],raw:"Array<any>"}}],return:{name:"void"}}},description:"Callback fired when the select all checkbox is checked."},renderAdditionalContent:{required:!1,flowType:{name:"signature",type:"function",raw:"(item: any) => Element<any>",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"}}},description:"A function that returns a JSX element to render as additional card content."},renderDescription:{required:!1,flowType:{name:"signature",type:"function",raw:"(item: any) => Element<any>",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"}}},description:`A function that returns a JSX element to render as the card description.
See Semantic UI <a href="https://react.semantic-ui.com/views/card/">Card</a>.`},renderEmptyList:{required:!1,flowType:{name:"signature",type:"function",raw:"() => Element<any>",signature:{arguments:[],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"}}},description:"A function that returns a JSX element to render when the list has no items."},renderExtra:{required:!1,flowType:{name:"signature",type:"function",raw:"(item: any) => Element<any>",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"}}},description:`A function that returns a JSX element to render as the card extra content.
See Semantic UI <a href="https://react.semantic-ui.com/views/card/">Card</a>.`},renderHeader:{required:!1,flowType:{name:"signature",type:"function",raw:"(item: any) => Element<any>",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"}}},description:`A function that returns a JSX element to render as the card header.
See Semantic UI <a href="https://react.semantic-ui.com/views/card/">Card</a>.`},renderImage:{required:!1,flowType:{name:"signature",type:"function",raw:"(item: any) => Element<any>",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"}}},description:`A function that returns a JSX element to render as the card image.
See Semantic UI <a href="https://react.semantic-ui.com/views/card/">Card</a>.`},renderMeta:{required:!1,flowType:{name:"signature",type:"function",raw:"(item: any) => Element<any>",signature:{arguments:[{name:"item",type:{name:"any"}}],return:{name:"Element",elements:[{name:"any"}],raw:"Element<any>"}}},description:`A function that returns a JSX element to render as the card meta.
See Semantic UI <a href="https://react.semantic-ui.com/views/card/">Card</a>.`},view:{required:!0,flowType:{name:"number"},description:`Toggles between list view and grid view. This prop is provided by the <code>ItemsToggle</code> higher-order
component.`}}};export{F as I,m as V};
